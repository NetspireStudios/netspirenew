---
// About Us Section - Minimalist & Modern
---

<section class="about-us" id="services">
  <!-- Three.js Background -->
  <canvas id="about-canvas" class="about-canvas"></canvas>
  
  <div class="about-container">
    <!-- Section Label -->
    <div class="section-label">
      <span>â€” About Netspire</span>
    </div>
    
    <!-- Main Content -->
    <div class="about-content">
      <!-- Company Overview -->
      <div class="overview-section">
        <h2>Shaping Digital Futures</h2>
        <p class="lead-text">
          At Netspire, we believe in the transformative power of digital innovation. Our mission is to bridge the gap between cutting-edge technology and meaningful human experiences.
        </p>
      </div>
      
      <!-- Goals & Mission Grid - 4 Vertical Cards -->
      <div class="content-grid">
        <!-- Our Mission -->
        <div class="content-card">
          <div class="card-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
              <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <h3>Our Mission</h3>
          <p>Create digital experiences that inspire, engage, and drive meaningful connections between brands and their audiences across the globe.</p>
        </div>

        <!-- Company Goals -->
        <div class="content-card">
          <div class="card-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
              <path d="M13 2L3 14H12L11 22L21 10H12L13 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <h3>Company Goals</h3>
          <p>Become the leading digital innovation partner for forward-thinking brands by pushing the boundaries of web technology and user experience.</p>
        </div>

        <!-- Future Plans -->
        <div class="content-card">
          <div class="card-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
              <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <h3>Future Vision</h3>
          <p>Expanding into AI-driven design solutions, immersive 3D experiences, and next-generation web technologies that redefine digital interaction.</p>
        </div>

        <!-- Core Values -->
        <div class="content-card">
          <div class="card-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
              <path d="M22 12H18L15 21L9 3L6 12H2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <h3>Core Values</h3>
          <p>Innovation, collaboration, and excellence drive everything we do. We believe in transparent communication and continuous learning.</p>
        </div>
      </div>
      
      <!-- Stats Section -->
      <div class="stats-section">
        <div class="stats-grid">
          <div class="stat-item">
            <div class="stat-number">200+</div>
            <div class="stat-label">Projects Delivered</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">50+</div>
            <div class="stat-label">Global Clients</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">10+</div>
            <div class="stat-label">Years Innovation</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">99%</div>
            <div class="stat-label">Client Satisfaction</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Call to Action -->
    <div class="cta-section">
      <h3>Ready to Transform Your Digital Presence?</h3>
      <p>Let's discuss how we can bring your vision to life with cutting-edge digital solutions.</p>
      <button class="cta-button">Start Your Journey</button>
    </div>
  </div>
</section>

<style>
  .about-us {
    position: relative;
    min-height: 100vh;
    padding: 120px 0;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 50%, #f1f3f4 100%);
    overflow: hidden;
  }

  /* Three.js Canvas */
  .about-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    opacity: 1;
    pointer-events: none;
  }

  .about-container {
    position: relative;
    z-index: 2;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 40px;
    text-align: center;
  }

  /* Section Label */
  .section-label {
    margin-bottom: 60px;
  }

  .section-label span {
    font-family: 'Inter', sans-serif;
    font-size: 12px;
    font-weight: 500;
    color: #666;
    letter-spacing: 2px;
    text-transform: uppercase;
  }

  /* Overview Section */
  .overview-section {
    margin-bottom: 80px;
  }

  .overview-section h2 {
    font-family: 'Space Grotesk', sans-serif;
    font-size: clamp(3rem, 8vw, 6rem);
    font-weight: 600;
    color: #000;
    margin-bottom: 30px;
    line-height: 0.9;
    letter-spacing: -0.02em;
  }

  .lead-text {
    font-family: 'Inter', sans-serif;
    font-size: 20px;
    line-height: 1.6;
    color: #555;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Content Grid - 4 Vertical Cards in Row */
  .content-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 30px;
    margin-bottom: 80px;
  }

  .content-card {
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 20px;
    padding: 40px 25px;
    min-height: 280px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    transition: all 0.4s ease;
    position: relative;
    transform-style: preserve-3d;
  }

  .content-card:hover {
    transform: translateY(-8px) rotateX(5deg) rotateY(2deg);
    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.15);
    border-color: rgba(255, 255, 255, 0.5);
  }

  .card-icon {
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.05);
    border-radius: 16px;
    margin-bottom: 24px;
    color: #333;
    transition: all 0.3s ease;
  }

  .content-card:hover .card-icon {
    background: rgba(0, 0, 0, 0.1);
    transform: scale(1.1);
  }

  .content-card h3 {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 20px;
    font-weight: 600;
    color: #000;
    margin-bottom: 16px;
    line-height: 1.2;
  }

  .content-card p {
    font-family: 'Inter', sans-serif;
    font-size: 15px;
    line-height: 1.6;
    color: #666;
    flex-grow: 1;
  }

  /* Stats Section */
  .stats-section {
    margin-bottom: 80px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 40px;
    padding: 50px 0;
    background: rgba(255, 255, 255, 0.6);
    backdrop-filter: blur(10px);
    border-radius: 24px;
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 48px;
    font-weight: 700;
    color: #000;
    margin-bottom: 12px;
    line-height: 1;
  }

  .stat-label {
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    color: #666;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* CTA Section */
  .cta-section {
    text-align: center;
  }

  .cta-section h3 {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 36px;
    font-weight: 600;
    color: #000;
    margin-bottom: 15px;
  }

  .cta-section p {
    font-family: 'Inter', sans-serif;
    font-size: 18px;
    color: #666;
    margin-bottom: 30px;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .cta-button {
    background: #000;
    color: #fff;
    border: none;
    padding: 18px 50px;
    border-radius: 12px;
    font-family: 'Inter', sans-serif;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .cta-button:hover {
    background: #333;
    transform: translateY(-3px);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
  }

  /* Mobile Responsive */
  @media (max-width: 1200px) {
    .content-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 25px;
    }

    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 30px;
    }
  }

  @media (max-width: 768px) {
    .about-us {
      padding: 80px 0;
    }

    .about-container {
      padding: 0 20px;
    }

    .overview-section h2 {
      font-size: clamp(2.5rem, 8vw, 4rem);
    }

    .lead-text {
      font-size: 18px;
    }

    .content-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .content-card {
      padding: 30px 20px;
      min-height: 240px;
      /* Remove 3D hover on mobile for better performance */
      transform: none !important;
    }

    .content-card:hover {
      transform: translateY(-5px) !important;
    }

    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
      padding: 40px 20px;
    }

    .stat-number {
      font-size: 36px;
    }

    .cta-section h3 {
      font-size: 28px;
    }
  }

  @media (max-width: 480px) {
    .stats-grid {
      grid-template-columns: 1fr;
      gap: 25px;
    }

    .content-card {
      padding: 25px 15px;
      min-height: 200px;
    }

    .card-icon {
      width: 56px;
      height: 56px;
      margin-bottom: 20px;
    }

    .content-card h3 {
      font-size: 18px;
    }

    .content-card p {
      font-size: 14px;
    }
  }
</style>

<script>
  // Three.js About Background - VISIBLE Animated Shapes
  function initAboutBackground() {
    const canvas = document.getElementById('about-canvas');
    if (!canvas) return;

    // @ts-ignore
    import('https://unpkg.com/three@0.157.0/build/three.module.js').then(({ default: THREE }) => {
      console.log('ðŸŽ¯ Initializing visible Three.js shapes...');
      
      // Scene setup
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ 
        canvas, 
        alpha: true, 
        antialias: true 
      });
      
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x000000, 0); // Transparent background
      
      // Create floating shapes with HIGH VISIBILITY
      const shapes: any[] = [];
      const geometries = [
        new THREE.OctahedronGeometry(3),
        new THREE.TetrahedronGeometry(2.5),
        new THREE.IcosahedronGeometry(2.8),
        new THREE.DodecahedronGeometry(2.5),
        new THREE.BoxGeometry(3, 3, 3),
        new THREE.SphereGeometry(2.2, 16, 16),
        new THREE.ConeGeometry(2, 4, 8),
        new THREE.CylinderGeometry(1.5, 2, 3, 8)
      ];
      
      // Create multiple visible shapes
      for (let i = 0; i < 20; i++) {
        const geometry = geometries[Math.floor(Math.random() * geometries.length)];
        
        // Mix of wireframe and solid materials with DARK colors
        const isWireframe = Math.random() > 0.4;
        const darkColor = new THREE.Color();
        
        if (isWireframe) {
          // Dark wireframe shapes
          darkColor.setRGB(
            0.1 + Math.random() * 0.2,  // Dark grays
            0.1 + Math.random() * 0.2,
            0.1 + Math.random() * 0.2
          );
        } else {
          // Solid dark shapes with subtle colors
          darkColor.setHSL(
            Math.random() * 0.1 + 0.6,  // Blue-gray hue
            0.3,
            0.15 + Math.random() * 0.15  // Very dark
          );
        }
        
        const material = new THREE.MeshBasicMaterial({
          color: darkColor,
          wireframe: isWireframe,
          transparent: true,
          opacity: isWireframe ? 0.8 : 0.6
        });
        
        const mesh = new THREE.Mesh(geometry, material);
        
        // Position shapes across the screen
        mesh.position.set(
          (Math.random() - 0.5) * 100,
          (Math.random() - 0.5) * 60,
          (Math.random() - 0.5) * 50
        );
        
        // Random initial rotation
        mesh.rotation.set(
          Math.random() * Math.PI * 2,
          Math.random() * Math.PI * 2,
          Math.random() * Math.PI * 2
        );
        
        // Scale some shapes randomly
        const scale = 0.8 + Math.random() * 0.6;
        mesh.scale.set(scale, scale, scale);
        
        shapes.push({
          mesh,
          rotationSpeed: {
            x: (Math.random() - 0.5) * 0.02,
            y: (Math.random() - 0.5) * 0.02,
            z: (Math.random() - 0.5) * 0.02
          },
          floatSpeed: Math.random() * 0.01 + 0.005,
          floatAmplitude: Math.random() * 2 + 1,
          originalY: mesh.position.y
        });
        
        scene.add(mesh);
      }
      
      camera.position.z = 25;
      
      console.log(`âœ… Created ${shapes.length} visible shapes`);
      
      // Animation loop with dramatic movement
      function animate() {
        requestAnimationFrame(animate);
        
        const time = Date.now() * 0.001;
        
        shapes.forEach((shape, index) => {
          // Continuous rotation
          shape.mesh.rotation.x += shape.rotationSpeed.x;
          shape.mesh.rotation.y += shape.rotationSpeed.y;
          shape.mesh.rotation.z += shape.rotationSpeed.z;
          
          // More dramatic floating motion
          shape.mesh.position.y = shape.originalY + Math.sin(time * shape.floatSpeed + index) * shape.floatAmplitude;
          shape.mesh.position.x += Math.cos(time * shape.floatSpeed * 0.8 + index) * 0.01;
          
          // Subtle pulsing scale
          const pulse = 1 + Math.sin(time * 2 + index) * 0.05;
          shape.mesh.scale.setScalar(pulse * (0.8 + (index % 3) * 0.2));
        });
        
        // Gentle camera movement for depth
        camera.position.x = Math.sin(time * 0.1) * 2;
        camera.position.y = Math.cos(time * 0.08) * 1.5;
        
        renderer.render(scene, camera);
      }
      
      animate();
      
      // Handle resize
      window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      });
      
      console.log('ðŸš€ Three.js background animations started');
    });
  }

  // Initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAboutBackground);
  } else {
    initAboutBackground();
  }
</script> 