---
// Modern Contact Section with Clean Design & Spline 3D Background
---

<section class="contact" id="contact">
  <!-- Normal Background (Video Removed) -->
  
  <!-- Content Overlay -->
  <div class="contact-overlay"></div>
  
  <div class="contact-container">
    <!-- Contact Header -->
    <div class="contact-header">
      <div class="header-content">
        <h2 class="contact-title">
          <span class="title-word">Get</span>
          <span class="title-word">In</span>
          <span class="title-word highlight">Touch</span>
        </h2>
        <p class="contact-description">
          Ready to bring your vision to life? Let's start a conversation about your next project.
        </p>
      </div>
    </div>

    <!-- Contact Content -->
    <div class="contact-content">
      <!-- Contact Form -->
      <div class="form-section">
        <div class="form-container">
          <h3 class="form-title">Tell us about your project</h3>
          
          <form class="contact-form" id="contact-form">
            <!-- Honeypot field for spam protection (hidden) -->
            <input type="text" name="website" style="display: none;" tabindex="-1" autocomplete="off" />
            
            <!-- Form success/error messages -->
            <div id="form-messages" class="form-messages" style="display: none;">
              <div id="success-message" class="message success-message" style="display: none;">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span id="success-text">Message sent successfully!</span>
              </div>
              <div id="error-message" class="message error-message" style="display: none;">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M12 9V13M12 17H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span id="error-text">An error occurred. Please try again.</span>
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="name" class="form-label">Name *</label>
                <input 
                  type="text" 
                  id="name" 
                  name="name" 
                  class="form-input" 
                  placeholder="Your full name"
                  required
                  minlength="2"
                  maxlength="100"
                  data-cursor="text"
                />
                <span class="field-error" id="name-error"></span>
              </div>
              <div class="form-group">
                <label for="email" class="form-label">Email *</label>
                <input 
                  type="email" 
                  id="email" 
                  name="email" 
                  class="form-input" 
                  placeholder="your@email.com"
                  required
                  maxlength="100"
                  data-cursor="text"
                />
                <span class="field-error" id="email-error"></span>
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="company" class="form-label">Company</label>
                <input 
                  type="text" 
                  id="company" 
                  name="company" 
                  class="form-input" 
                  placeholder="Your company name"
                  maxlength="100"
                  data-cursor="text"
                />
              </div>
              <div class="form-group">
                <label for="budget" class="form-label">Budget Range</label>
                <select 
                  id="budget" 
                  name="budget" 
                  class="form-select" 
                  data-cursor="hover"
                >
                  <option value="">Select budget range</option>
                  <option value="under-10k">Under $10,000</option>
                  <option value="10k-25k">$10,000 - $25,000</option>
                  <option value="25k-50k">$25,000 - $50,000</option>
                  <option value="50k-100k">$50,000 - $100,000</option>
                  <option value="100k-plus">$100,000+</option>
                </select>
              </div>
            </div>

            <div class="form-group full-width">
              <label for="project-type" class="form-label">Project Type</label>
              <div class="checkbox-group">
                <label class="checkbox-item">
                  <input type="checkbox" name="services" value="web-development" />
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">Web Development</span>
                </label>
                <label class="checkbox-item">
                  <input type="checkbox" name="services" value="ui-ux-design" />
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">UI/UX Design</span>
                </label>

                <label class="checkbox-item">
                  <input type="checkbox" name="services" value="branding" />
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">Branding</span>
                </label>
                <label class="checkbox-item">
                  <input type="checkbox" name="services" value="consulting" />
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">Consulting</span>
                </label>
                <label class="checkbox-item">
                  <input type="checkbox" name="services" value="ai-automation" />
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">AI & Automation</span>
                </label>
                <label class="checkbox-item">
                  <input type="checkbox" name="services" value="other" />
                  <span class="checkbox-mark"></span>
                  <span class="checkbox-text">Other</span>
                </label>
              </div>
            </div>

            <div class="form-group full-width">
              <label for="message" class="form-label">Project Details *</label>
              <textarea 
                id="message" 
                name="message" 
                class="form-textarea" 
                placeholder="Tell us about your project goals, timeline, and any specific requirements..."
                rows="5"
                required
                minlength="10"
                maxlength="2000"
                data-cursor="text"
              ></textarea>
              <span class="field-error" id="message-error"></span>
              <div class="character-count">
                <span id="char-count">0</span>/2000 characters
              </div>
            </div>

            <div class="form-submit">
              <button type="submit" class="submit-btn" data-cursor="hover" id="submit-button">
                <span class="btn-text">Send Message</span>
                <div class="btn-spinner" style="display: none;">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 12 12" to="360 12 12" repeatCount="indefinite"/>
                    </circle>
                  </svg>
                </div>
                <svg class="btn-icon" width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M7 17L17 7M17 7H7M17 7V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
              <p class="form-note">We'll get back to you within 24 hours.</p>
            </div>
          </form>
        </div>
      </div>

      <!-- Contact Info -->
      <div class="info-section">
        <div class="info-container">
          <h3 class="info-title">Let's connect</h3>
          <p class="info-description">
            Prefer to reach out directly? We're always happy to chat about new opportunities.
          </p>

          <div class="contact-methods">
            <a href="mailto:hello@netspire.studio" class="contact-method" data-cursor="hover">
              <div class="method-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <path d="M4 4H20C21.1 4 22 4.9 22 6V18C22 19.1 21.1 20 20 20H4C2.9 20 2 19.1 2 18V6C2 4.9 2.9 4 4 4Z" stroke="currentColor" stroke-width="1.5"/>
                  <polyline points="22,6 12,13 2,6" stroke="currentColor" stroke-width="1.5"/>
                </svg>
              </div>
              <div class="method-content">
                <div class="method-label">Email</div>
                <div class="method-value">hello@netspire.studio</div>
              </div>
            </a>

            <a href="tel:+1234567890" class="contact-method" data-cursor="hover">
              <div class="method-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <path d="M22 16.92V19.92C22 20.42 21.96 20.93 21.88 21.42C21.49 24.28 19.4 26 16.73 26C7.59 26 1 19.41 1 10.27C1 7.6 2.72 5.51 5.58 5.12C6.07 5.04 6.58 5 7.08 5H10.08C10.58 5 11.03 5.3 11.21 5.76L12.74 9.29C12.89 9.65 12.81 10.06 12.54 10.35L10.76 12.13C10.39 12.5 10.35 13.09 10.66 13.51C11.43 14.64 12.36 15.57 13.49 16.34C13.91 16.65 14.5 16.61 14.87 16.24L16.65 14.46C16.94 14.19 17.35 14.11 17.71 14.26L21.24 15.79C21.7 15.97 22 16.42 22 16.92Z" stroke="currentColor" stroke-width="1.5"/>
                </svg>
              </div>
              <div class="method-content">
                <div class="method-label">Phone</div>
                <div class="method-value">+1 (234) 567-890</div>
              </div>
            </a>

            <div class="contact-method">
              <div class="method-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <path d="M21 10C21 17 12 23 12 23S3 17 3 10C3 5.58 7.03 2 12 2S21 5.58 21 10Z" stroke="currentColor" stroke-width="1.5"/>
                  <circle cx="12" cy="10" r="3" stroke="currentColor" stroke-width="1.5"/>
                </svg>
              </div>
              <div class="method-content">
                <div class="method-label">Location</div>
                <div class="method-value">New York, NY<br>United States</div>
              </div>
            </div>
          </div>

          <div class="social-section">
            <h4 class="social-title">Follow our work</h4>
            <div class="social-links">
              <a href="#" class="social-link" data-cursor="hover">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <rect x="2" y="2" width="20" height="20" rx="5" ry="5" stroke="currentColor" stroke-width="1.5"/>
                  <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" stroke="currentColor" stroke-width="1.5"/>
                  <line x1="17.5" y1="6.5" x2="17.51" y2="6.5" stroke="currentColor" stroke-width="2"/>
                </svg>
                <span>Instagram</span>
              </a>
              <a href="#" class="social-link" data-cursor="hover">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" stroke="currentColor" stroke-width="1.5"/>
                  <rect x="2" y="9" width="4" height="12" stroke="currentColor" stroke-width="1.5"/>
                  <circle cx="4" cy="4" r="2" stroke="currentColor" stroke-width="1.5"/>
                </svg>
                <span>LinkedIn</span>
              </a>
              <a href="#" class="social-link" data-cursor="hover">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5"/>
                  <path d="M8.56 2.75c4.37 6.03 6.02 9.42 8.03 17.72m2.54-15.38c-3.72 4.35-8.94 5.66-16.88 5.85m19.5 1.9c-3.5-.93-6.63-.82-8.94 0-2.58.92-5.01 2.86-7.44 6.32" stroke="currentColor" stroke-width="1.5"/>
                </svg>
                <span>Dribbble</span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .contact {
    position: relative;
    width: 100%;
    min-height: 100vh;
    padding: 0;
    margin: 0;
    overflow: hidden;
    background: linear-gradient(135deg, #000000 0%, #1a1a1a 50%, #2d2d2d 100%);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Content Overlay */
  .contact-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
      radial-gradient(circle at 30% 30%, rgba(0,0,0,0.3) 0%, transparent 50%),
      radial-gradient(circle at 70% 70%, rgba(0,0,0,0.4) 0%, transparent 50%),
      linear-gradient(135deg, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.4) 100%);
    z-index: 2;
  }

  .contact-container {
    position: relative;
    z-index: 3;
    max-width: 1400px;
    margin: 0 auto;
    padding: 120px 40px;
    pointer-events: auto;
    width: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  /* Contact Header */
  .contact-header {
    text-align: center;
    margin-bottom: 80px;
  }

  .header-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .contact-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: clamp(3.5rem, 7vw, 6rem);
    font-weight: 500;
    line-height: 0.9;
    color: #fff;
    margin-bottom: 30px;
    letter-spacing: -0.02em;
  }

  .title-word {
    display: inline-block;
    opacity: 1;
    transform: translateY(0);
    transition: all 0.6s ease;
  }

  .title-word.highlight {
    background: linear-gradient(135deg, #c0c0c0 0%, #4a90e2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .contact-description {
    font-family: 'Inter', sans-serif;
    font-size: 18px;
    font-weight: 400;
    color: rgba(255, 255, 255, 0.8);
    line-height: 1.6;
    opacity: 1;
    transform: translateY(0);
    transition: all 0.6s ease;
  }

  /* Contact Content */
  .contact-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 80px;
    align-items: start;
  }

  /* Form Section */
  .form-section {
    position: relative;
  }

  .form-container {
    background: rgba(0, 0, 0, 0.7);
    border-radius: 24px;
    padding: 50px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
  }

  .form-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 28px;
    font-weight: 500;
    color: #fff;
    margin-bottom: 40px;
    letter-spacing: -0.01em;
  }

  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .form-group.full-width {
    grid-column: 1 / -1;
  }

  .form-label {
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    font-weight: 500;
    color: rgba(255, 255, 255, 0.9);
    letter-spacing: 0.2px;
  }

  .form-input,
  .form-select,
  .form-textarea {
    padding: 16px 20px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(192, 192, 192, 0.3);
    border-radius: 12px;
    font-family: 'Inter', sans-serif;
    font-size: 15px;
    font-weight: 400;
    color: #fff;
    transition: all 0.3s ease;
    outline: none;
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
    backdrop-filter: blur(10px);
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    border-color: #4a90e2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2), 0 0 15px rgba(74, 144, 226, 0.3);
    background: rgba(255, 255, 255, 0.15);
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }

  .form-select {
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23c0c0c0' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 16px center;
    background-repeat: no-repeat;
    background-size: 16px;
    padding-right: 45px;
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
    font-family: 'Inter', sans-serif;
  }

  /* Checkbox Group */
  .checkbox-group {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 15px;
    margin-top: 10px;
  }

  .checkbox-item {
    display: flex;
    align-items: center;
    gap: 12px;
    cursor: pointer;
    padding: 12px 16px;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .checkbox-item:hover {
    background: rgba(0, 0, 0, 0.02);
  }

  .checkbox-item input[type="checkbox"] {
    display: none;
  }

  .checkbox-mark {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(192, 192, 192, 0.4);
    border-radius: 4px;
    position: relative;
    transition: all 0.3s ease;
    flex-shrink: 0;
  }

  .checkbox-item input[type="checkbox"]:checked + .checkbox-mark {
    background: #4a90e2;
    border-color: #4a90e2;
    box-shadow: 0 0 10px rgba(74, 144, 226, 0.4);
  }

  .checkbox-item input[type="checkbox"]:checked + .checkbox-mark::after {
    content: '';
    position: absolute;
    left: 6px;
    top: 2px;
    width: 6px;
    height: 10px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }

  .checkbox-text {
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    font-weight: 400;
    color: rgba(255, 255, 255, 0.7);
    user-select: none;
  }

  .checkbox-item input[type="checkbox"]:checked ~ .checkbox-text {
    color: #fff;
    font-weight: 500;
  }

  /* Submit Button */
  .form-submit {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 20px;
  }

  .submit-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 18px 40px;
    background: linear-gradient(135deg, #c0c0c0 0%, #e6e6e6 100%);
    color: #000;
    border: none;
    border-radius: 12px;
    font-family: 'Inter', sans-serif;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    width: fit-content;
    box-shadow: 0 4px 15px rgba(192, 192, 192, 0.2);
  }

  .submit-btn:hover {
    background: linear-gradient(135deg, #d4d4d4 0%, #f0f0f0 100%);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(74, 144, 226, 0.4), 0 0 20px rgba(74, 144, 226, 0.3);
    border: 1px solid rgba(74, 144, 226, 0.5);
  }

  .btn-icon {
    transition: transform 0.3s ease;
  }

  .submit-btn:hover .btn-icon {
    transform: translateX(3px);
  }

  .form-note {
    font-family: 'Inter', sans-serif;
    font-size: 13px;
    color: rgba(255, 255, 255, 0.6);
    margin: 0;
  }

  /* Form Messages */
  .form-messages {
    margin-bottom: 30px;
  }

  .message {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px 20px;
    border-radius: 12px;
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 15px;
    transition: all 0.3s ease;
  }

  .success-message {
    background: rgba(34, 197, 94, 0.15);
    color: #22c55e;
    border: 1px solid rgba(34, 197, 94, 0.3);
  }

  .error-message {
    background: rgba(239, 68, 68, 0.15);
    color: #ef4444;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  /* Field Errors */
  .field-error {
    display: block;
    color: #ef4444;
    font-family: 'Inter', sans-serif;
    font-size: 12px;
    margin-top: 6px;
    margin-left: 4px;
    opacity: 0;
    height: 0;
    transition: all 0.3s ease;
  }

  .field-error.show {
    opacity: 1;
    height: auto;
    margin-top: 6px;
  }

  .form-input.error,
  .form-textarea.error {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
  }

  /* Character Count */
  .character-count {
    text-align: right;
    margin-top: 6px;
    font-family: 'Inter', sans-serif;
    font-size: 12px;
    color: rgba(255, 255, 255, 0.5);
  }

  .character-count.warning {
    color: #f59e0b;
  }

  .character-count.error {
    color: #ef4444;
  }

  /* Submit Button Loading State */
  .submit-btn.loading {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .submit-btn.loading .btn-text {
    opacity: 0.7;
  }

  .submit-btn.loading .btn-icon {
    display: none;
  }

  .btn-spinner {
    display: none;
  }

  .submit-btn.loading .btn-spinner {
    display: block;
  }

  /* Success States */
  .submit-btn.success {
    background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
    color: white;
  }

  .submit-btn.error {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    color: white;
  }

  /* Info Section */
  .info-section {
    position: relative;
  }

  .info-container {
    position: sticky;
    top: 120px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 20px;
    padding: 40px;
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
  }

  .info-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 24px;
    font-weight: 500;
    color: #fff;
    margin-bottom: 16px;
    letter-spacing: -0.01em;
  }

  .info-description {
    font-family: 'Inter', sans-serif;
    font-size: 16px;
    color: rgba(255, 255, 255, 0.8);
    line-height: 1.6;
    margin-bottom: 40px;
  }

  /* Contact Methods */
  .contact-methods {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 50px;
  }

  .contact-method {
    display: flex;
    align-items: flex-start;
    gap: 16px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    text-decoration: none;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .contact-method:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(74, 144, 226, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(74, 144, 226, 0.2);
  }

  .method-icon {
    flex-shrink: 0;
    width: 45px;
    height: 45px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
  }

  .method-content {
    flex: 1;
    padding-top: 2px;
  }

  .method-label {
    font-family: 'Inter', sans-serif;
    font-size: 12px;
    font-weight: 500;
    color: rgba(255, 255, 255, 0.6);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 4px;
  }

  .method-value {
    font-family: 'Inter', sans-serif;
    font-size: 15px;
    font-weight: 500;
    color: #fff;
    line-height: 1.4;
  }

  /* Social Section */
  .social-section {
    padding-top: 30px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .social-title {
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    font-weight: 500;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 20px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .social-links {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .social-link {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    border-radius: 8px;
    text-decoration: none;
    color: rgba(255, 255, 255, 0.7);
    transition: all 0.3s ease;
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    font-weight: 500;
  }

  .social-link:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .contact-content {
      grid-template-columns: 1fr;
      gap: 60px;
    }

    .info-container {
      position: static;
    }

    .contact-methods {
      margin-bottom: 40px;
    }

    .social-links {
      flex-direction: row;
      flex-wrap: wrap;
    }
  }

  @media (max-width: 768px) {
    .contact {
      padding: 120px 0;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .contact-container {
      padding: 40px 20px;
      width: 100%;
      max-width: 100%;
    }

    .contact-header {
      margin-bottom: 50px;
      text-align: center;
    }

    .contact-title {
      font-size: clamp(2.5rem, 8vw, 4rem);
      margin-bottom: 20px;
    }

    .contact-subtitle {
      font-size: 16px;
      line-height: 1.6;
      max-width: 100%;
      text-align: center;
    }

    .contact-content {
      grid-template-columns: 1fr;
      gap: 40px;
      max-width: 600px;
      margin: 0 auto;
    }

    .form-container {
      padding: 35px 25px;
      border-radius: 20px;
      background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .form-title {
      font-size: 1.8rem;
      margin-bottom: 25px;
      text-align: center;
      color: #ffffff;
    }

    .form-row {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .form-input,
    .form-select,
    .form-textarea {
      width: 100%;
      max-width: 100%;
      padding: 16px 20px;
      font-size: 15px;
      border-radius: 12px;
    }

    .form-textarea {
      min-height: 120px;
    }

    .submit-button {
      width: 100%;
      padding: 18px 32px;
      font-size: 15px;
      justify-content: center;
      margin-top: 10px;
    }

    .checkbox-group {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .info-container {
      padding: 35px 25px;
      border-radius: 20px;
      background: rgba(0, 0, 0, 0.85);
      backdrop-filter: blur(20px);
      text-align: center;
    }

    .info-title {
      font-size: 1.6rem;
      margin-bottom: 20px;
    }

    .contact-methods {
      gap: 25px;
    }

    .method-item {
      padding: 20px;
      border-radius: 12px;
    }

    .social-links {
      justify-content: center;
      gap: 20px;
      margin-top: 25px;
    }
  }

  @media (max-width: 480px) {
    .contact {
      padding: 100px 0;
    }

    .contact-container {
      padding: 30px 15px;
    }

    .contact-header {
      margin-bottom: 40px;
    }

    .contact-title {
      font-size: clamp(2rem, 8vw, 3rem);
      margin-bottom: 15px;
    }

    .contact-subtitle {
      font-size: 14px;
      padding: 0 10px;
    }

    .contact-content {
      gap: 30px;
      max-width: 100%;
    }

    .form-container {
      padding: 30px 20px;
      border-radius: 16px;
    }

    .form-title {
      font-size: 1.5rem;
      margin-bottom: 20px;
    }

    .form-input,
    .form-select,
    .form-textarea {
      padding: 14px 18px;
      font-size: 14px;
    }

    .form-textarea {
      min-height: 100px;
    }

    .submit-button {
      padding: 16px 28px;
      font-size: 14px;
    }

    .info-container {
      padding: 30px 20px;
    }

    .info-title {
      font-size: 1.4rem;
      margin-bottom: 15px;
    }

    .contact-methods {
      gap: 15px;
    }

    .contact-method {
      padding: 16px;
    }

    .social-links {
      flex-direction: column;
    }

    .info-container {
      padding: 25px;
    }
  }
</style>

<script>
  // Professional Contact Form with Full Functionality
  function initContactForm() {
    console.log('📧 Initializing professional contact form...');

    // Form state management
    let isSubmitting = false;
    let lastSubmitTime = 0;
    const SUBMIT_COOLDOWN = 5000; // 5 seconds between submissions

    // Get form elements
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const btnText = submitButton?.querySelector('.btn-text') as HTMLElement;
    const btnSpinner = submitButton?.querySelector('.btn-spinner') as HTMLElement;
    const btnIcon = submitButton?.querySelector('.btn-icon') as HTMLElement;
    
    // Message elements
    const formMessages = document.getElementById('form-messages') as HTMLElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;
    const successText = document.getElementById('success-text') as HTMLElement;
    const errorText = document.getElementById('error-text') as HTMLElement;

    // Field error elements
    const nameError = document.getElementById('name-error') as HTMLElement;
    const emailError = document.getElementById('email-error') as HTMLElement;
    const messageError = document.getElementById('message-error') as HTMLElement;

    // Character count
    const messageField = document.getElementById('message') as HTMLTextAreaElement;
    const charCount = document.getElementById('char-count') as HTMLElement;
    const characterCount = document.querySelector('.character-count') as HTMLElement;

    if (!form || !submitButton) {
      console.error('❌ Contact form elements not found');
      return;
    }

    // Contact Form Animations
    function initContactAnimations() {
      const animateElements = () => {
        const elements = [
          { selector: '.title-word', delay: 0 },
          { selector: '.contact-description', delay: 200 },
          { selector: '.form-container', delay: 400 },
          { selector: '.info-container', delay: 600 }
        ];

        elements.forEach(({ selector, delay }) => {
          setTimeout(() => {
            const element = document.querySelector(selector) as HTMLElement;
            if (element) {
              element.style.opacity = '1';
              element.style.transform = 'translateY(0)';
            }
          }, delay);
        });
      };

      if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {
        console.log('✅ Using GSAP for contact animations');
        
        gsap.registerPlugin(ScrollTrigger);

        const headerTl = gsap.timeline({
          scrollTrigger: {
            trigger: '.contact-header',
            start: 'top 85%',
            toggleActions: 'play none none reverse'
          }
        });

        headerTl
          .from('.title-word', {
            y: 50,
            opacity: 0,
            duration: 0.8,
            stagger: 0.1,
            ease: 'power3.out'
          })
          .from('.contact-description', {
            y: 30,
            opacity: 0,
            duration: 0.6,
            ease: 'power3.out'
          }, '-=0.4');

        const contentTl = gsap.timeline({
          scrollTrigger: {
            trigger: '.contact-content',
            start: 'top 80%',
            toggleActions: 'play none none reverse'
          }
        });

        contentTl
          .from('.form-container', {
            x: -50,
            opacity: 0,
            duration: 0.8,
            ease: 'power3.out'
          })
          .from('.info-container', {
            x: 50,
            opacity: 0,
            duration: 0.8,
            ease: 'power3.out'
          }, '-=0.6')
          .from('.contact-method', {
            y: 20,
            opacity: 0,
            duration: 0.5,
            stagger: 0.1,
            ease: 'power3.out'
          }, '-=0.4');

      } else {
        console.log('⚠️ GSAP not available, using fallback animations');
        setTimeout(animateElements, 500);
      }
    }

    // Field validation functions
    function validateName(name: string): string | null {
      if (!name.trim()) return 'Name is required';
      if (name.trim().length < 2) return 'Name must be at least 2 characters';
      if (name.trim().length > 100) return 'Name must be less than 100 characters';
      if (!/^[a-zA-Z\s\-'\.]+$/.test(name.trim())) return 'Name contains invalid characters';
      return null;
    }

    function validateEmail(email: string): string | null {
      if (!email.trim()) return 'Email is required';
      if (email.length > 100) return 'Email must be less than 100 characters';
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email.trim())) return 'Please enter a valid email address';
      return null;
    }

    function validateMessage(message: string): string | null {
      if (!message.trim()) return 'Project details are required';
      if (message.trim().length < 10) return 'Please provide more details (at least 10 characters)';
      if (message.length > 2000) return 'Message is too long (maximum 2000 characters)';
      return null;
    }

    // Show field error
    function showFieldError(field: HTMLElement, errorElement: HTMLElement, message: string) {
      field.classList.add('error');
      errorElement.textContent = message;
      errorElement.classList.add('show');
    }

    // Clear field error
    function clearFieldError(field: HTMLElement, errorElement: HTMLElement) {
      field.classList.remove('error');
      errorElement.textContent = '';
      errorElement.classList.remove('show');
    }

    // Show form message
    function showFormMessage(type: 'success' | 'error', message: string) {
      formMessages.style.display = 'block';
      
      if (type === 'success') {
        successText.textContent = message;
        successMessage.style.display = 'flex';
        errorMessage.style.display = 'none';
      } else {
        errorText.textContent = message;
        errorMessage.style.display = 'flex';
        successMessage.style.display = 'none';
      }

      // Auto-hide after 5 seconds
      setTimeout(() => {
        formMessages.style.display = 'none';
        successMessage.style.display = 'none';
        errorMessage.style.display = 'none';
      }, 5000);
    }

    // Update character count
    function updateCharacterCount() {
      if (!messageField || !charCount) return;
      
      const length = messageField.value.length;
      charCount.textContent = length.toString();
      
      // Update styling based on character count
      characterCount.classList.remove('warning', 'error');
      if (length > 1800) {
        characterCount.classList.add('error');
      } else if (length > 1500) {
        characterCount.classList.add('warning');
      }
    }

    // Submit form data
    async function submitForm(formData: FormData): Promise<{ success: boolean; message: string }> {
      try {
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: formData.get('name'),
            email: formData.get('email'),
            company: formData.get('company'),
            budget: formData.get('budget'),
            services: formData.getAll('services'),
            message: formData.get('message'),
            website: formData.get('website') // Honeypot field
          })
        });

        const result = await response.json();
        
        if (!response.ok) {
          throw new Error(result.error || 'Failed to send message');
        }

        return { success: true, message: result.message };
      } catch (error) {
        console.error('Form submission error:', error);
        return { 
          success: false, 
          message: error instanceof Error ? error.message : 'Failed to send message. Please try again.' 
        };
      }
    }

    // Set button state
    function setButtonState(state: 'normal' | 'loading' | 'success' | 'error') {
      submitButton.classList.remove('loading', 'success', 'error');
      
      switch (state) {
        case 'loading':
          submitButton.classList.add('loading');
          submitButton.disabled = true;
          btnText.textContent = 'Sending...';
          btnSpinner.style.display = 'block';
          btnIcon.style.display = 'none';
          break;
        case 'success':
          submitButton.classList.add('success');
          submitButton.disabled = false;
          btnText.textContent = 'Message Sent!';
          btnSpinner.style.display = 'none';
          btnIcon.style.display = 'block';
          break;
        case 'error':
          submitButton.classList.add('error');
          submitButton.disabled = false;
          btnText.textContent = 'Try Again';
          btnSpinner.style.display = 'none';
          btnIcon.style.display = 'block';
          break;
        default:
          submitButton.disabled = false;
          btnText.textContent = 'Send Message';
          btnSpinner.style.display = 'none';
          btnIcon.style.display = 'block';
      }
    }

    // Form submission handler
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Check cooldown
      const now = Date.now();
      if (now - lastSubmitTime < SUBMIT_COOLDOWN) {
        const remainingTime = Math.ceil((SUBMIT_COOLDOWN - (now - lastSubmitTime)) / 1000);
        showFormMessage('error', `Please wait ${remainingTime} seconds before submitting again.`);
        return;
      }

      if (isSubmitting) {
        console.log('⚠️ Form already submitting');
        return;
      }

      console.log('📤 Form submission started');
      isSubmitting = true;
      lastSubmitTime = now;

      // Clear previous errors
      const nameField = document.getElementById('name') as HTMLInputElement;
      const emailField = document.getElementById('email') as HTMLInputElement;
      const messageField = document.getElementById('message') as HTMLTextAreaElement;

      clearFieldError(nameField, nameError);
      clearFieldError(emailField, emailError);
      clearFieldError(messageField, messageError);

      // Validate fields
      let hasErrors = false;
      
      const nameValidation = validateName(nameField.value);
      if (nameValidation) {
        showFieldError(nameField, nameError, nameValidation);
        hasErrors = true;
      }

      const emailValidation = validateEmail(emailField.value);
      if (emailValidation) {
        showFieldError(emailField, emailError, emailValidation);
        hasErrors = true;
      }

      const messageValidation = validateMessage(messageField.value);
      if (messageValidation) {
        showFieldError(messageField, messageError, messageValidation);
        hasErrors = true;
      }

      if (hasErrors) {
        isSubmitting = false;
        showFormMessage('error', 'Please fix the errors above and try again.');
        return;
      }

      // Set loading state
      setButtonState('loading');

      try {
        const formData = new FormData(form);
        const result = await submitForm(formData);

        if (result.success) {
          console.log('✅ Form submitted successfully');
          setButtonState('success');
          showFormMessage('success', result.message);
          
          // Reset form after success
          setTimeout(() => {
            form.reset();
            updateCharacterCount();
            setButtonState('normal');
          }, 3000);
        } else {
          console.log('❌ Form submission failed:', result.message);
          setButtonState('error');
          showFormMessage('error', result.message);
          
          // Reset button after error
          setTimeout(() => {
            setButtonState('normal');
          }, 3000);
        }
      } catch (error) {
        console.error('❌ Unexpected error:', error);
        setButtonState('error');
        showFormMessage('error', 'An unexpected error occurred. Please try again.');
        
        setTimeout(() => {
          setButtonState('normal');
        }, 3000);
      } finally {
        isSubmitting = false;
      }
    });

    // Real-time field validation
    [
      { field: document.getElementById('name') as HTMLInputElement, validator: validateName, error: nameError },
      { field: document.getElementById('email') as HTMLInputElement, validator: validateEmail, error: emailError },
      { field: document.getElementById('message') as HTMLTextAreaElement, validator: validateMessage, error: messageError }
    ].forEach(({ field, validator, error }) => {
      if (field && error) {
        field.addEventListener('blur', () => {
          const validation = validator(field.value);
          if (validation) {
            showFieldError(field, error, validation);
          } else {
            clearFieldError(field, error);
          }
        });

        field.addEventListener('input', () => {
          if (error.classList.contains('show')) {
            const validation = validator(field.value);
            if (!validation) {
              clearFieldError(field, error);
            }
          }
        });
      }
    });

    // Character count for message field
    if (messageField) {
      messageField.addEventListener('input', updateCharacterCount);
      updateCharacterCount(); // Initial count
    }

    // Enhanced form interactions
    const formInputs = form.querySelectorAll('.form-input, .form-select, .form-textarea');
    formInputs.forEach(input => {
      input.addEventListener('focus', () => {
        const group = input.closest('.form-group');
        if (group) group.classList.add('focused');
      });

      input.addEventListener('blur', () => {
        const group = input.closest('.form-group');
        if (group) group.classList.remove('focused');
      });
    });

    // Initialize animations
    initContactAnimations();

    console.log('✅ Professional contact form initialized with full functionality');
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initContactForm);
  } else {
    initContactForm();
  }
</script> 