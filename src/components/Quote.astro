---
interface Props {
  quote: string;
  author: string;
  role: string;
  shapeType?: 'cube' | 'sphere' | 'tetrahedron' | 'octahedron';
}

const { 
  quote,
  author,
  role,
  shapeType = 'cube'
} = Astro.props;
---

<section class="quote-section">
  <!-- Three.js Quote Background -->
  <canvas class="quote-canvas" id={`quote-canvas-${shapeType}`}></canvas>
  
  <div class="quote-container">
    <div class="quote-content">
      <blockquote class="quote-text">
        <span class="quote-mark">"</span>
        <span class="quote-words">{quote}</span>
        <span class="quote-mark">"</span>
      </blockquote>
      
      <div class="quote-attribution">
        <div class="author-name">{author}</div>
        <div class="author-role">{role}</div>
      </div>
    </div>
  </div>
</section>

<style>
  .quote-section {
    position: relative;
    min-height: 80vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #000 0%, #1a1a1a 50%, #000 100%);
    overflow: hidden;
    padding: 100px 0;
  }

  .quote-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    opacity: 0.3;
  }

  .quote-container {
    position: relative;
    z-index: 2;
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 60px;
    text-align: center;
  }

  .quote-content {
    opacity: 0;
    transform: translateY(50px);
  }

  .quote-text {
    font-family: 'Space Grotesk', sans-serif;
    font-size: clamp(1.5rem, 4vw, 3rem);
    font-weight: 300;
    line-height: 1.3;
    color: #fff;
    margin: 0 0 40px;
    letter-spacing: -0.01em;
    position: relative;
  }

  .quote-mark {
    font-size: 1.5em;
    opacity: 0.6;
    color: rgba(255, 255, 255, 0.4);
  }

  .quote-words {
    display: inline-block;
    margin: 0 0.2em;
  }

  .quote-attribution {
    margin-top: 40px;
  }

  .author-name {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 18px;
    font-weight: 500;
    color: #fff;
    margin-bottom: 8px;
    letter-spacing: 0.5px;
  }

  .author-role {
    font-family: 'Inter', sans-serif;
    font-size: 14px;
    font-weight: 400;
    color: rgba(255, 255, 255, 0.6);
    letter-spacing: 1px;
    text-transform: uppercase;
  }

  /* Mobile Optimizations */
  @media (max-width: 768px) {
    .quote-section {
      min-height: 70vh;
      padding: 80px 0;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .quote-container {
      padding: 0 30px;
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
      text-align: center;
    }

    .quote-content {
      max-width: 100%;
      padding: 40px 20px;
    }

    .quote-text {
      font-size: clamp(1.5rem, 6vw, 2.2rem);
      line-height: 1.4;
      margin-bottom: 30px;
      text-align: center;
    }

    .quote-author {
      text-align: center;
      margin-top: 25px;
    }

    .author-name {
      font-size: 16px;
      margin-bottom: 5px;
    }

    .author-role {
      font-size: 13px;
      opacity: 0.8;
    }

    .quote-canvas {
      opacity: 0.3;
    }
  }

  @media (max-width: 480px) {
    .quote-section {
      min-height: 60vh;
      padding: 60px 0;
    }

    .quote-container {
      padding: 0 20px;
    }

    .quote-content {
      padding: 30px 15px;
    }

    .quote-text {
      font-size: clamp(1.3rem, 6vw, 1.8rem);
      line-height: 1.3;
      margin-bottom: 25px;
    }

    .quote-author {
      margin-top: 20px;
    }

    .author-name {
      font-size: 15px;
    }

    .author-role {
      font-size: 12px;
    }

    .quote-canvas {
      opacity: 0.2;
    }
  }
</style>

<script>
  import * as THREE from 'three';

  // Enhanced Quote Background with Large 3D Shape
  function initQuoteBackground() {
    const canvases = document.querySelectorAll('.quote-canvas');
    
    canvases.forEach((canvas) => {
      if (!canvas) return;
      
      const canvasId = canvas.id;
      const shapeType = canvasId.split('-').pop();
      
      console.log(`ðŸŽ¨ Initializing quote background with ${shapeType}...`);

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ 
        canvas: canvas as HTMLCanvasElement,
        alpha: true,
        antialias: true 
      });

      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

      // Create large central 3D shape based on type
      let geometry;
      switch (shapeType) {
        case 'sphere':
          geometry = new THREE.SphereGeometry(6, 32, 32);
          break;
        case 'tetrahedron':
          geometry = new THREE.TetrahedronGeometry(8);
          break;
        case 'octahedron':
          geometry = new THREE.OctahedronGeometry(7);
          break;
        default: // cube
          geometry = new THREE.BoxGeometry(8, 8, 8);
      }

      const material = new THREE.MeshBasicMaterial({ 
        color: 0xffffff,
        wireframe: true,
        transparent: true,
        opacity: 0.15
      });

      const shape = new THREE.Mesh(geometry, material);
      shape.position.set(0, 0, -10);
      scene.add(shape);

      camera.position.z = 5;

      let animationId: number;
      let startTime = Date.now();

      // Smooth animation loop
      function animate() {
        animationId = requestAnimationFrame(animate);

        const time = (Date.now() - startTime) * 0.001;

        // Slow, elegant rotation
        shape.rotation.x = time * 0.3;
        shape.rotation.y = time * 0.2;
        shape.rotation.z = time * 0.1;

        // Gentle floating
        shape.position.y = Math.sin(time * 0.5) * 1;
        shape.position.x = Math.cos(time * 0.3) * 0.5;

        // Subtle scale breathing
        const scale = 1 + Math.sin(time * 0.8) * 0.1;
        shape.scale.setScalar(scale);

        renderer.render(scene, camera);
      }

      animate();

      // Handle resize
      function handleResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }

      window.addEventListener('resize', handleResize);

      // Cleanup function
      const cleanup = () => {
        cancelAnimationFrame(animationId);
        window.removeEventListener('resize', handleResize);
        scene.remove(shape);
        geometry.dispose();
        material.dispose();
        renderer.dispose();
      };

      // Store cleanup function for later use
      (canvas as any).__cleanup = cleanup;
    });

    console.log('âœ… Quote backgrounds initialized');
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initQuoteBackground);
  } else {
    initQuoteBackground();
  }
</script> 