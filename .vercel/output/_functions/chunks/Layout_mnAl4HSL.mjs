import { c as createAstro, a as createComponent, r as renderTemplate, b as renderSlot, d as renderHead, e as renderScript, f as addAttribute } from './astro/server_DCYO4UzX.mjs';
import 'kleur/colors';
import 'clsx';
/* empty css                                    */

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://netspire.studio");
const $$Layout = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Layout;
  const {
    title,
    description = "NETSPIRE - Cinematic digital experiences that push boundaries.",
    image = "/images/og-image.jpg"
  } = Astro2.props;
  const canonicalURL = Astro2.site ? new URL(Astro2.url.pathname, Astro2.site) : Astro2.url;
  return renderTemplate(_a || (_a = __template(['<html lang="en" data-astro-cid-sckkx6r4> <head><!-- Essential Meta Tags --><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="description"', '><link rel="canonical"', "><!-- Title --><title>", '</title><!-- Open Graph --><meta property="og:type" content="website"><meta property="og:url"', '><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><!-- Favicon --><link rel="icon" type="image/x-icon" href="/owl.ico"><!-- Fonts --><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700;800&display=swap" rel="stylesheet"><!-- GSAP CDN with fallback check --><script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" onload="window.gsapLoaded = true"><\/script>', "", "", "", "", "<!-- Lenis Smooth Scroll - Updated CDN -->", "<!-- Critical Styles -->", '</head> <body data-astro-cid-sckkx6r4> <!-- Global Preloader (disabled on concepts page) --> <div class="preloader" id="preloader" style="display: none;" data-astro-cid-sckkx6r4> <div class="preloader-logo" id="preloader-logo" data-astro-cid-sckkx6r4>NETSPIRE</div> <div class="preloader-bar-container" id="preloader-bar-container" data-astro-cid-sckkx6r4> <div class="preloader-bar" id="preloader-bar" data-astro-cid-sckkx6r4></div> </div> <div class="preloader-counter" id="preloader-counter" data-astro-cid-sckkx6r4>000</div> </div> <!-- Navigation --> <nav class="main-nav" id="main-nav" data-astro-cid-sckkx6r4> <a href="/" class="nav-logo" id="nav-logo" data-astro-cid-sckkx6r4>NETSPIRE</a> <button class="burger-menu" id="burger-menu" data-astro-cid-sckkx6r4> <span class="burger-line" data-astro-cid-sckkx6r4></span> <span class="burger-line" data-astro-cid-sckkx6r4></span> <span class="burger-line" data-astro-cid-sckkx6r4></span> </button> </nav> <!-- Fullscreen Menu --> <div class="fullscreen-menu" id="fullscreen-menu" data-astro-cid-sckkx6r4> <div class="menu-content" data-astro-cid-sckkx6r4> <div class="menu-nav" data-astro-cid-sckkx6r4> <!-- Left Column --> <div class="menu-column left" data-astro-cid-sckkx6r4> <li data-astro-cid-sckkx6r4><a href="/" data-cursor="text" data-astro-cid-sckkx6r4>Home</a></li> <li data-astro-cid-sckkx6r4><a href="#services" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>About Us</a></li> <li data-astro-cid-sckkx6r4><a href="#services" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>Services</a></li> <li data-astro-cid-sckkx6r4><a href="#work" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>Projects</a></li> </div> <!-- Right Column --> <div class="menu-column right" data-astro-cid-sckkx6r4> <li data-astro-cid-sckkx6r4><a href="/concepts" data-cursor="text" data-astro-cid-sckkx6r4>Concepts</a></li> <li data-astro-cid-sckkx6r4><a href="/blogs" data-cursor="text" data-astro-cid-sckkx6r4>Blog</a></li> <li data-astro-cid-sckkx6r4><a href="#contact" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>Contact</a></li> </div> </div> <div class="menu-social" data-astro-cid-sckkx6r4> <a href="https://www.instagram.com/netspirestudio/?hl=en" target="_blank" rel="noopener noreferrer" data-cursor="hover" data-astro-cid-sckkx6r4> <svg width="20" height="20" viewBox="0 0 24 24" fill="none" data-astro-cid-sckkx6r4> <rect x="2" y="2" width="20" height="20" rx="5" ry="5" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></rect> <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></path> <line x1="17.5" y1="6.5" x2="17.51" y2="6.5" stroke="currentColor" stroke-width="2" data-astro-cid-sckkx6r4></line> </svg> <span data-astro-cid-sckkx6r4>Instagram</span> </a> <a href="#" data-cursor="hover" data-astro-cid-sckkx6r4> <svg width="20" height="20" viewBox="0 0 24 24" fill="none" data-astro-cid-sckkx6r4> <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></path> </svg> <span data-astro-cid-sckkx6r4>Twitter</span> </a> <a href="https://www.linkedin.com/company/netspirestudio" target="_blank" rel="noopener noreferrer" data-cursor="hover" data-astro-cid-sckkx6r4> <svg width="20" height="20" viewBox="0 0 24 24" fill="none" data-astro-cid-sckkx6r4> <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></path> <rect x="2" y="9" width="4" height="12" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></rect> <circle cx="4" cy="4" r="2" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></circle> </svg> <span data-astro-cid-sckkx6r4>LinkedIn</span> </a> </div> </div> </div> <!-- Page Transition --> <div class="page-transition" id="page-transition" data-astro-cid-sckkx6r4></div> <!-- Main Content --> <div class="main-content" id="main-content" data-astro-cid-sckkx6r4> ', " </div> <!-- Initialize --> <script>\n      // Fallback timeout to ensure content always shows\n      const FALLBACK_TIMEOUT = 5000; // 5 seconds max\n      let fallbackTimer;\n      \n      function showMainContent() {\n        console.log('\u{1F3AC} Showing main content');\n        document.body.classList.add('loaded', 'content-visible');\n        const mainContent = document.getElementById('main-content');\n        if (mainContent) {\n          mainContent.style.opacity = '1';\n        }\n        const preloader = document.getElementById('preloader');\n        if (preloader) {\n          setTimeout(() => {\n            preloader.style.display = 'none';\n          }, 1000);\n        }\n        if (fallbackTimer) {\n          clearTimeout(fallbackTimer);\n        }\n      }\n      \n      // Fallback timer\n      fallbackTimer = setTimeout(() => {\n        console.log('\u26A0\uFE0F Fallback timeout triggered - showing content');\n        showMainContent();\n      }, FALLBACK_TIMEOUT);\n      \n      // Additional fallback - check if content is visible after page load\n      window.addEventListener('load', () => {\n        setTimeout(() => {\n          const mainContent = document.getElementById('main-content');\n          if (mainContent && window.getComputedStyle(mainContent).opacity === '0') {\n            console.log('\u26A0\uFE0F Content still hidden - forcing visibility');\n            showMainContent();\n          }\n        }, 3000);\n      });\n      \n          // Basic preloader without waiting for external libraries\n    function initBasicPreloader() {\n      // Skip global preloader on pages with custom preloaders\n      if (window.location.pathname.includes('/concepts') || window.location.pathname.includes('/about')) {\n        console.log('\u23ED\uFE0F Skipping global preloader on page with custom preloader');\n        return;\n      }\n      \n      console.log('\u{1F504} Starting basic preloader');\n      const preloader = document.getElementById('preloader');\n      if (preloader) {\n        preloader.style.display = 'flex';\n      }\n      \n      const preloaderCounter = document.getElementById('preloader-counter');\n      const preloaderBar = document.getElementById('preloader-bar');\n        \n        let progress = 0;\n        const duration = 2000; // 2 seconds\n        const startTime = Date.now();\n        \n        function updateProgress() {\n          const elapsed = Date.now() - startTime;\n          progress = Math.min(elapsed / duration, 1);\n          \n          if (preloaderCounter) {\n            const currentCounter = Math.floor(progress * 100);\n            preloaderCounter.textContent = currentCounter.toString().padStart(3, '0');\n          }\n          \n          if (preloaderBar) {\n            preloaderBar.style.width = (progress * 100) + '%';\n          }\n          \n          if (progress < 1) {\n            requestAnimationFrame(updateProgress);\n          } else {\n            // Preloader complete\n            setTimeout(() => {\n              const preloader = document.getElementById('preloader');\n              if (preloader) {\n                preloader.style.transform = 'translateY(-100%)';\n                preloader.style.transition = 'transform 1s ease-in-out';\n                setTimeout(showMainContent, 1000);\n              }\n            }, 300);\n          }\n        }\n        \n        // Start basic animation\n        setTimeout(() => {\n          const logo = document.getElementById('preloader-logo');\n          const counter = document.getElementById('preloader-counter');\n          const barContainer = document.getElementById('preloader-bar-container');\n          \n          if (logo) {\n            logo.style.opacity = '1';\n            logo.style.transform = 'translateY(0)';\n            logo.style.transition = 'all 1s ease-out';\n          }\n          \n          if (counter) {\n            counter.style.opacity = '1';\n            counter.style.transform = 'translateY(0)';\n            counter.style.transition = 'all 0.8s ease-out 0.3s';\n          }\n          \n          if (barContainer) {\n            barContainer.style.opacity = '1';\n            barContainer.style.transform = 'scaleX(1)';\n            barContainer.style.transition = 'all 0.8s ease-out 0.2s';\n          }\n          \n          setTimeout(updateProgress, 500);\n        }, 100);\n      }\n      \n      // Enhanced initialization with GSAP/Lenis\n      function initializeWebsite() {\n        console.log('\u{1F680} Checking for GSAP and Lenis...');\n        \n        // Fallback timer for content visibility\n        setTimeout(() => {\n          if (!window.gsapLoaded || typeof gsap === 'undefined') {\n            console.log('\u26A0\uFE0F GSAP failed to load - using fallback animations');\n            document.body.classList.add('content-fallback');\n          }\n        }, 3000);\n        \n        // Simple Lenis initialization\n        if (typeof Lenis !== 'undefined') {\n          console.log('\u2705 Lenis loaded');\n          \n          const lenis = new Lenis({\n            duration: 1.2,\n            smooth: true\n          });\n          \n          function raf(time) {\n            lenis.raf(time);\n            requestAnimationFrame(raf);\n          }\n          requestAnimationFrame(raf);\n          \n          window.lenis = lenis;\n        }\n        \n        // Enhanced GSAP setup with animations\n        if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {\n          console.log('\u2705 GSAP loaded - initializing animations');\n          gsap.registerPlugin(ScrollTrigger);\n          \n          // Hero title animation\n          gsap.set('.title-word', { y: '100%', opacity: 0 });\n          gsap.set('.hero-description', { y: 30, opacity: 0 });\n          gsap.set('.hero-cta', { y: 30, opacity: 0 });\n          gsap.set('.scroll-indicator', { y: 30, opacity: 0 });\n          \n          // Animate hero elements\n          const tl = gsap.timeline({ delay: 0.5 });\n          tl.to('.title-word', {\n            y: 0,\n            opacity: 1,\n            duration: 1.2,\n            ease: 'power3.out'\n          })\n          .to('.hero-description', {\n            y: 0,\n            opacity: 1,\n            duration: 0.8,\n            ease: 'power3.out'\n          }, '-=0.6')\n          .to('.hero-cta', {\n            y: 0,\n            opacity: 1,\n            duration: 0.8,\n            ease: 'power3.out'\n          }, '-=0.4')\n          .to('.scroll-indicator', {\n            y: 0,\n            opacity: 1,\n            duration: 0.6,\n            ease: 'power3.out'\n          }, '-=0.2');\n          \n          // About Us header animation\n          gsap.set('#services .overview-section h2', { y: '100%', opacity: 0 });\n          gsap.set('#services .lead-text', { y: 30, opacity: 0 });\n          ScrollTrigger.create({\n            trigger: '.overview-section',\n            start: 'top 80%',\n            onEnter: () => {\n              const tl = gsap.timeline();\n              tl.to('#services .overview-section h2', {\n                y: 0,\n                opacity: 1,\n                duration: 0.8,\n                ease: 'power3.out'\n              })\n              .to('#services .lead-text', {\n                y: 0,\n                opacity: 1,\n                duration: 0.6,\n                ease: 'power3.out'\n              }, '-=0.4');\n            }\n          });\n\n\n          \n\n\n          // Enhanced Contact section animations\n          gsap.set('.contact .big-text-line', { y: 100, opacity: 0 });\n          gsap.set('.contact .contact-subtitle', { y: 30, opacity: 0 });\n          ScrollTrigger.create({\n            trigger: '.contact-hero',\n            start: 'top 80%',\n            onEnter: () => {\n              const tl = gsap.timeline();\n              tl.to('.contact .big-text-line', {\n                y: 0,\n                opacity: 1,\n                duration: 1,\n                ease: 'power3.out',\n                stagger: 0.15\n              })\n              .to('.contact .contact-subtitle', {\n                y: 0,\n                opacity: 1,\n                duration: 0.8,\n                ease: 'power3.out'\n              }, '-=0.4');\n            }\n          });\n\n          // Quote sections animations\n          document.querySelectorAll('.quote-section').forEach((section, index) => {\n            gsap.set(section.querySelector('.quote-content'), { y: 50, opacity: 0 });\n            ScrollTrigger.create({\n              trigger: section,\n              start: 'top 75%',\n              onEnter: () => {\n                gsap.to(section.querySelector('.quote-content'), {\n                  y: 0,\n                  opacity: 1,\n                  duration: 1.2,\n                  ease: 'power3.out'\n                });\n              }\n            });\n          });\n          \n        } else {\n          console.log('\u26A0\uFE0F GSAP/ScrollTrigger not available - using fallback animations');\n          // Force fallback animations immediately\n          setTimeout(() => {\n            document.body.classList.add('content-fallback');\n            console.log('\u{1F527} Fallback animations activated');\n          }, 100);\n        }\n        \n\n        \n        // Enhanced Navigation functionality\n        function initNavigation() {\n          const burgerMenu = document.getElementById('burger-menu');\n          const fullscreenMenu = document.getElementById('fullscreen-menu');\n          const navLogo = document.getElementById('nav-logo');\n          let menuOpen = false;\n          \n          console.log('\u{1F527} Initializing navigation...');\n          console.log('Burger menu found:', !!burgerMenu);\n          console.log('Fullscreen menu found:', !!fullscreenMenu);\n\n                    // Section-based navigation color detection\n          function updateNavigationColor() {\n            if (!burgerMenu || !navLogo) return;\n            \n            const scrollY = window.scrollY;\n            const windowHeight = window.innerHeight;\n            \n            // Get all main sections\n            const heroSection = document.querySelector('.hero');\n            const servicesSection = document.querySelector('.about-us'); // Services/About section\n            const quoteSection = document.querySelector('.quote-section');\n            const portfolioSection = document.querySelector('.portfolio');\n            const contactSection = document.querySelector('.contact');\n            \n            let isOnDarkBackground = true; // Default: dark background (white nav)\n            \n                         // Calculate section positions\n             const sections = [\n               { element: heroSection, dark: true },      // Hero - dark (3D robot)\n               { element: servicesSection, dark: false }, // Services - white\n               { element: quoteSection, dark: true },     // Quote/Sphere - dark  \n               { element: portfolioSection, dark: false }, // Portfolio - white\n               { element: contactSection, dark: true }    // Contact - dark\n             ];\n            \n            // Find which section we're currently in\n            for (let i = 0; i < sections.length; i++) {\n              const section = sections[i];\n              if (!section.element) continue;\n              \n              const rect = section.element.getBoundingClientRect();\n              const sectionTop = scrollY + rect.top;\n              const sectionBottom = sectionTop + rect.height;\n              \n              // Check if we're in this section (with some overlap tolerance)\n              if (scrollY >= sectionTop - windowHeight * 0.2 && scrollY < sectionBottom - windowHeight * 0.2) {\n                isOnDarkBackground = section.dark;\n                break;\n              }\n            }\n            \n            // Update navigation elements\n            if (isOnDarkBackground) {\n              // Dark background sections - use white nav elements\n              burgerMenu.classList.remove('dark');\n              navLogo.classList.remove('dark');\n            } else {\n              // Light background sections (Portfolio) - use dark nav elements\n              burgerMenu.classList.add('dark');\n              navLogo.classList.add('dark');\n            }\n          }\n          \n          // Update on scroll\n          window.addEventListener('scroll', updateNavigationColor);\n          \n          // Update on resize\n          window.addEventListener('resize', updateNavigationColor);\n          \n          // Initial update\n          setTimeout(updateNavigationColor, 100);\n          \n          // Burger menu click\n          if (burgerMenu && fullscreenMenu) {\n            burgerMenu.addEventListener('click', (e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              \n              menuOpen = !menuOpen;\n              console.log('Menu toggled:', menuOpen);\n              \n              burgerMenu.classList.toggle('active', menuOpen);\n              fullscreenMenu.classList.toggle('active', menuOpen);\n              \n              // Prevent body scrolling when menu is open\n              if (menuOpen) {\n                // Store current scroll position\n                const scrollY = window.pageYOffset || document.documentElement.scrollTop;\n                \n                // Prevent body scrolling\n                document.body.style.overflow = 'hidden';\n                document.body.style.position = 'fixed';\n                document.body.style.width = '100%';\n                document.body.style.height = '100%';\n                document.body.style.top = `-${scrollY}px`;\n                \n                // Store scroll position for restoration\n                document.body.setAttribute('data-scroll-y', scrollY.toString());\n              } else {\n                // Restore body scrolling\n                const scrollY = parseInt(document.body.getAttribute('data-scroll-y') || '0');\n                \n                document.body.style.overflow = '';\n                document.body.style.position = '';\n                document.body.style.width = '';\n                document.body.style.height = '';\n                document.body.style.top = '';\n                \n                // Restore scroll position\n                window.scrollTo(0, scrollY);\n                document.body.removeAttribute('data-scroll-y');\n              }\n              \n              // Animate menu items (with or without GSAP)\n              if (typeof gsap !== 'undefined') {\n                                  if (menuOpen) {\n                    gsap.fromTo('.menu-nav a', {\n                      y: 60,\n                      opacity: 0\n                    }, {\n                      y: 0,\n                      opacity: 1,\n                      duration: 0.4,\n                      ease: 'power2.out',\n                      stagger: 0.05,\n                      delay: 0.05\n                    });\n                    \n                    gsap.fromTo('.menu-social a', {\n                      y: 20,\n                      opacity: 0\n                    }, {\n                      y: 0,\n                      opacity: 0.7,\n                      duration: 0.3,\n                      ease: 'power2.out',\n                      stagger: 0.03,\n                      delay: 0.2\n                    });\n                } else {\n                  gsap.to('.menu-nav a', {\n                    y: 100,\n                    opacity: 0,\n                    duration: 0.3,\n                    ease: 'power3.in',\n                    stagger: 0.02\n                  });\n                  \n                  gsap.to('.menu-social a', {\n                    y: 50,\n                    opacity: 0,\n                    duration: 0.3,\n                    ease: 'power3.in',\n                    stagger: 0.02\n                  });\n                }\n              } else {\n                console.log('\u{1F4F1} Using CSS-only menu animations');\n              }\n            });\n            \n            console.log('\u2705 Burger menu click handler attached');\n          } else {\n            console.log('\u274C Navigation elements not found');\n          }\n          \n          return { burgerMenu, fullscreenMenu, menuOpen: () => menuOpen, updateNavigationColor };\n        }\n        \n          // Initialize navigation\n  const nav = initNavigation();\n\n  // Smooth scroll functionality for burger menu\n  function initSmoothScrolling() {\n    const scrollLinks = document.querySelectorAll('.scroll-link');\n    const burgerMenu = document.querySelector('.burger-menu');\n    const fullscreenMenu = document.querySelector('.fullscreen-menu');\n    \n    scrollLinks.forEach(link => {\n      link.addEventListener('click', function(e) {\n        e.preventDefault();\n        \n        const href = this.getAttribute('href');\n        const targetId = href.replace('#', '');\n        const targetElement = document.getElementById(targetId);\n        \n        if (targetElement) {\n          console.log(`\u{1F3AF} Scrolling to: ${targetId}`);\n          \n          // Close burger menu first\n          if (burgerMenu && fullscreenMenu) {\n            burgerMenu.classList.remove('active');\n            fullscreenMenu.classList.remove('active');\n            \n            // Restore body scroll\n            const currentScroll = parseInt(document.body.style.top || '0') * -1;\n            document.body.style.position = '';\n            document.body.style.top = '';\n            document.body.style.overflow = '';\n            document.body.style.width = '';\n            if (currentScroll > 0) {\n              window.scrollTo(0, currentScroll);\n            }\n          }\n          \n          // Smooth scroll to target with offset for fixed header\n          setTimeout(() => {\n            const headerOffset = 80;\n            const elementPosition = targetElement.getBoundingClientRect().top;\n            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n            \n            window.scrollTo({\n              top: offsetPosition,\n              behavior: 'smooth'\n            });\n          }, 300); // Small delay to let menu close\n        } else {\n          console.warn(`\u274C Target element not found: ${targetId}`);\n        }\n      });\n    });\n    \n    console.log('\u2705 Smooth scrolling initialized');\n  }\n\n  // Initialize smooth scrolling\n  initSmoothScrolling();\n        \n        // Page Transition System\n        function initPageTransitions() {\n          const pageTransition = document.getElementById('page-transition');\n          if (!pageTransition) return;\n\n          console.log('\u{1F3AC} Initializing page transitions');\n\n          // Function to animate page transition\n          function animatePageTransition(url) {\n            return new Promise((resolve) => {\n              // Start transition (slide in from left)\n              pageTransition.classList.add('active');\n              \n              setTimeout(() => {\n                // Navigate to new page\n                window.location.href = url;\n                resolve(true);\n              }, 300); // Half the transition duration\n            });\n          }\n\n          // Function to exit transition on page load\n          function exitPageTransition() {\n            if (pageTransition.classList.contains('active')) {\n              setTimeout(() => {\n                pageTransition.classList.add('exit');\n                setTimeout(() => {\n                  pageTransition.classList.remove('active', 'exit');\n                }, 600);\n              }, 100);\n            }\n          }\n\n          // Exit transition on page load\n          exitPageTransition();\n\n          return { animatePageTransition };\n        }\n\n        // Initialize page transitions\n        const pageTransitions = initPageTransitions();\n\n        // Menu links handling\n        function initMenuLinks() {\n          document.querySelectorAll('.menu-nav a').forEach(link => {\n            link.addEventListener('click', (e) => {\n              const target = link.getAttribute('href');\n              \n              console.log('Menu link clicked:', target);\n              \n              // Restore body scrolling before closing menu\n              const scrollY = parseInt(document.body.getAttribute('data-scroll-y') || '0');\n              document.body.style.overflow = '';\n              document.body.style.position = '';\n              document.body.style.width = '';\n              document.body.style.height = '';\n              document.body.style.top = '';\n              window.scrollTo(0, scrollY);\n              document.body.removeAttribute('data-scroll-y');\n              \n              // Close menu using nav object\n              if (nav.burgerMenu) nav.burgerMenu.classList.remove('active');\n              if (nav.fullscreenMenu) nav.fullscreenMenu.classList.remove('active');\n              \n              // Update menuOpen state (if accessible)\n              if (typeof menuOpen !== 'undefined') {\n                menuOpen = false;\n              }\n              \n              // Handle different link types\n              if (target === '/') {\n                // Home link - special handling\n                e.preventDefault();\n                const currentPath = window.location.pathname;\n                \n                if (currentPath === '/' || currentPath === '/index.html') {\n                  // Already on home page - scroll to top\n                  const lenis = window.lenis;\n                  if (lenis) {\n                    lenis.scrollTo(0, { duration: 1.5 });\n                  } else {\n                    window.scrollTo({ top: 0, behavior: 'smooth' });\n                  }\n                  console.log('Scrolling to top of home page');\n                } else {\n                  // On sub-page - navigate to home page\n                  console.log('Navigating to home page');\n                  if (pageTransitions && pageTransitions.animatePageTransition) {\n                    pageTransitions.animatePageTransition('/');\n                  } else {\n                    window.location.href = '/';\n                  }\n                }\n              } else if (target && target.startsWith('#')) {\n                // Anchor link - prevent default and scroll\n                e.preventDefault();\n                const currentPath = window.location.pathname;\n                \n                if (currentPath === '/' || currentPath === '/index.html') {\n                  // On home page - scroll to section\n                  const targetElement = document.querySelector(target);\n                  if (targetElement) {\n                    const lenis = window.lenis;\n                    if (lenis) {\n                      lenis.scrollTo(targetElement, { duration: 1.5 });\n                    } else {\n                      targetElement.scrollIntoView({ behavior: 'smooth' });\n                    }\n                    console.log('Scrolling to:', target);\n                  } else {\n                    console.log('Target element not found:', target);\n                  }\n                } else {\n                  // On sub-page - navigate to home page with hash\n                  console.log('Navigating to home page with anchor:', target);\n                  if (pageTransitions && pageTransitions.animatePageTransition) {\n                    pageTransitions.animatePageTransition('/' + target);\n                  } else {\n                    window.location.href = '/' + target;\n                  }\n                }\n              } else if (target && target.startsWith('/')) {\n                // Page navigation - animate transition\n                e.preventDefault();\n                console.log('Animating page transition to:', target);\n                if (pageTransitions && pageTransitions.animatePageTransition) {\n                  pageTransitions.animatePageTransition(target);\n                } else {\n                  // Fallback to direct navigation\n                  window.location.href = target;\n                }\n              }\n            });\n          });\n          console.log('\u2705 Menu links initialized with page transitions');\n        }\n        \n        // Initialize menu links\n        initMenuLinks();\n        \n        // Navigation scroll effects\n        const mainNav = document.getElementById('main-nav');\n        const navLogo = document.getElementById('nav-logo');\n        if (mainNav && navLogo && typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {\n          ScrollTrigger.create({\n            trigger: \"body\",\n            start: \"top -100\",\n            end: \"bottom bottom\",\n            onUpdate: (self) => {\n              if (self.direction === 1) {\n                mainNav.classList.add('scrolled');\n                navLogo.classList.add('small');\n              } else {\n                mainNav.classList.remove('scrolled');\n                navLogo.classList.remove('small');\n              }\n              \n              // Update navigation color when scrolling\n              const burgerMenu = document.getElementById('burger-menu');\n              if (burgerMenu && nav.updateNavigationColor) {\n                nav.updateNavigationColor();\n              }\n            }\n          });\n        }\n        \n        // Global GSAP defaults\n        if (typeof gsap !== 'undefined') {\n          gsap.defaults({\n            ease: 'power3.out',\n            duration: 1\n          });\n        }\n        \n        console.log('\u{1F680} Netspire initialized');\n      }\n      \n      // Ultimate fallback - force content visibility after 6 seconds\n      setTimeout(() => {\n        console.log('\u{1F527} Ultimate fallback - forcing content visibility');\n        const hiddenElements = document.querySelectorAll('[style*=\"opacity: 0\"], .title-word, .hero-description, .hero-cta, .scroll-indicator, .service-item, .portfolio-item');\n        hiddenElements.forEach(el => {\n          if (el && el.style && window.getComputedStyle(el).opacity === '0') {\n            el.style.opacity = '1';\n            el.style.transform = 'translateY(0)';\n            el.style.transition = 'all 0.5s ease';\n          }\n        });\n      }, 6000);\n      \n      // Start basic preloader immediately\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n          initBasicPreloader();\n          initializeWebsite();\n        });\n      } else {\n        initBasicPreloader();\n        initializeWebsite();\n      }\n    <\/script> </body> </html>"], ['<html lang="en" data-astro-cid-sckkx6r4> <head><!-- Essential Meta Tags --><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="description"', '><link rel="canonical"', "><!-- Title --><title>", '</title><!-- Open Graph --><meta property="og:type" content="website"><meta property="og:url"', '><meta property="og:title"', '><meta property="og:description"', '><meta property="og:image"', '><!-- Favicon --><link rel="icon" type="image/x-icon" href="/owl.ico"><!-- Fonts --><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700;800&display=swap" rel="stylesheet"><!-- GSAP CDN with fallback check --><script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" onload="window.gsapLoaded = true"><\/script>', "", "", "", "", "<!-- Lenis Smooth Scroll - Updated CDN -->", "<!-- Critical Styles -->", '</head> <body data-astro-cid-sckkx6r4> <!-- Global Preloader (disabled on concepts page) --> <div class="preloader" id="preloader" style="display: none;" data-astro-cid-sckkx6r4> <div class="preloader-logo" id="preloader-logo" data-astro-cid-sckkx6r4>NETSPIRE</div> <div class="preloader-bar-container" id="preloader-bar-container" data-astro-cid-sckkx6r4> <div class="preloader-bar" id="preloader-bar" data-astro-cid-sckkx6r4></div> </div> <div class="preloader-counter" id="preloader-counter" data-astro-cid-sckkx6r4>000</div> </div> <!-- Navigation --> <nav class="main-nav" id="main-nav" data-astro-cid-sckkx6r4> <a href="/" class="nav-logo" id="nav-logo" data-astro-cid-sckkx6r4>NETSPIRE</a> <button class="burger-menu" id="burger-menu" data-astro-cid-sckkx6r4> <span class="burger-line" data-astro-cid-sckkx6r4></span> <span class="burger-line" data-astro-cid-sckkx6r4></span> <span class="burger-line" data-astro-cid-sckkx6r4></span> </button> </nav> <!-- Fullscreen Menu --> <div class="fullscreen-menu" id="fullscreen-menu" data-astro-cid-sckkx6r4> <div class="menu-content" data-astro-cid-sckkx6r4> <div class="menu-nav" data-astro-cid-sckkx6r4> <!-- Left Column --> <div class="menu-column left" data-astro-cid-sckkx6r4> <li data-astro-cid-sckkx6r4><a href="/" data-cursor="text" data-astro-cid-sckkx6r4>Home</a></li> <li data-astro-cid-sckkx6r4><a href="#services" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>About Us</a></li> <li data-astro-cid-sckkx6r4><a href="#services" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>Services</a></li> <li data-astro-cid-sckkx6r4><a href="#work" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>Projects</a></li> </div> <!-- Right Column --> <div class="menu-column right" data-astro-cid-sckkx6r4> <li data-astro-cid-sckkx6r4><a href="/concepts" data-cursor="text" data-astro-cid-sckkx6r4>Concepts</a></li> <li data-astro-cid-sckkx6r4><a href="/blogs" data-cursor="text" data-astro-cid-sckkx6r4>Blog</a></li> <li data-astro-cid-sckkx6r4><a href="#contact" data-cursor="text" class="scroll-link" data-astro-cid-sckkx6r4>Contact</a></li> </div> </div> <div class="menu-social" data-astro-cid-sckkx6r4> <a href="https://www.instagram.com/netspirestudio/?hl=en" target="_blank" rel="noopener noreferrer" data-cursor="hover" data-astro-cid-sckkx6r4> <svg width="20" height="20" viewBox="0 0 24 24" fill="none" data-astro-cid-sckkx6r4> <rect x="2" y="2" width="20" height="20" rx="5" ry="5" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></rect> <path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></path> <line x1="17.5" y1="6.5" x2="17.51" y2="6.5" stroke="currentColor" stroke-width="2" data-astro-cid-sckkx6r4></line> </svg> <span data-astro-cid-sckkx6r4>Instagram</span> </a> <a href="#" data-cursor="hover" data-astro-cid-sckkx6r4> <svg width="20" height="20" viewBox="0 0 24 24" fill="none" data-astro-cid-sckkx6r4> <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></path> </svg> <span data-astro-cid-sckkx6r4>Twitter</span> </a> <a href="https://www.linkedin.com/company/netspirestudio" target="_blank" rel="noopener noreferrer" data-cursor="hover" data-astro-cid-sckkx6r4> <svg width="20" height="20" viewBox="0 0 24 24" fill="none" data-astro-cid-sckkx6r4> <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></path> <rect x="2" y="9" width="4" height="12" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></rect> <circle cx="4" cy="4" r="2" stroke="currentColor" stroke-width="1.5" data-astro-cid-sckkx6r4></circle> </svg> <span data-astro-cid-sckkx6r4>LinkedIn</span> </a> </div> </div> </div> <!-- Page Transition --> <div class="page-transition" id="page-transition" data-astro-cid-sckkx6r4></div> <!-- Main Content --> <div class="main-content" id="main-content" data-astro-cid-sckkx6r4> ', " </div> <!-- Initialize --> <script>\n      // Fallback timeout to ensure content always shows\n      const FALLBACK_TIMEOUT = 5000; // 5 seconds max\n      let fallbackTimer;\n      \n      function showMainContent() {\n        console.log('\u{1F3AC} Showing main content');\n        document.body.classList.add('loaded', 'content-visible');\n        const mainContent = document.getElementById('main-content');\n        if (mainContent) {\n          mainContent.style.opacity = '1';\n        }\n        const preloader = document.getElementById('preloader');\n        if (preloader) {\n          setTimeout(() => {\n            preloader.style.display = 'none';\n          }, 1000);\n        }\n        if (fallbackTimer) {\n          clearTimeout(fallbackTimer);\n        }\n      }\n      \n      // Fallback timer\n      fallbackTimer = setTimeout(() => {\n        console.log('\u26A0\uFE0F Fallback timeout triggered - showing content');\n        showMainContent();\n      }, FALLBACK_TIMEOUT);\n      \n      // Additional fallback - check if content is visible after page load\n      window.addEventListener('load', () => {\n        setTimeout(() => {\n          const mainContent = document.getElementById('main-content');\n          if (mainContent && window.getComputedStyle(mainContent).opacity === '0') {\n            console.log('\u26A0\uFE0F Content still hidden - forcing visibility');\n            showMainContent();\n          }\n        }, 3000);\n      });\n      \n          // Basic preloader without waiting for external libraries\n    function initBasicPreloader() {\n      // Skip global preloader on pages with custom preloaders\n      if (window.location.pathname.includes('/concepts') || window.location.pathname.includes('/about')) {\n        console.log('\u23ED\uFE0F Skipping global preloader on page with custom preloader');\n        return;\n      }\n      \n      console.log('\u{1F504} Starting basic preloader');\n      const preloader = document.getElementById('preloader');\n      if (preloader) {\n        preloader.style.display = 'flex';\n      }\n      \n      const preloaderCounter = document.getElementById('preloader-counter');\n      const preloaderBar = document.getElementById('preloader-bar');\n        \n        let progress = 0;\n        const duration = 2000; // 2 seconds\n        const startTime = Date.now();\n        \n        function updateProgress() {\n          const elapsed = Date.now() - startTime;\n          progress = Math.min(elapsed / duration, 1);\n          \n          if (preloaderCounter) {\n            const currentCounter = Math.floor(progress * 100);\n            preloaderCounter.textContent = currentCounter.toString().padStart(3, '0');\n          }\n          \n          if (preloaderBar) {\n            preloaderBar.style.width = (progress * 100) + '%';\n          }\n          \n          if (progress < 1) {\n            requestAnimationFrame(updateProgress);\n          } else {\n            // Preloader complete\n            setTimeout(() => {\n              const preloader = document.getElementById('preloader');\n              if (preloader) {\n                preloader.style.transform = 'translateY(-100%)';\n                preloader.style.transition = 'transform 1s ease-in-out';\n                setTimeout(showMainContent, 1000);\n              }\n            }, 300);\n          }\n        }\n        \n        // Start basic animation\n        setTimeout(() => {\n          const logo = document.getElementById('preloader-logo');\n          const counter = document.getElementById('preloader-counter');\n          const barContainer = document.getElementById('preloader-bar-container');\n          \n          if (logo) {\n            logo.style.opacity = '1';\n            logo.style.transform = 'translateY(0)';\n            logo.style.transition = 'all 1s ease-out';\n          }\n          \n          if (counter) {\n            counter.style.opacity = '1';\n            counter.style.transform = 'translateY(0)';\n            counter.style.transition = 'all 0.8s ease-out 0.3s';\n          }\n          \n          if (barContainer) {\n            barContainer.style.opacity = '1';\n            barContainer.style.transform = 'scaleX(1)';\n            barContainer.style.transition = 'all 0.8s ease-out 0.2s';\n          }\n          \n          setTimeout(updateProgress, 500);\n        }, 100);\n      }\n      \n      // Enhanced initialization with GSAP/Lenis\n      function initializeWebsite() {\n        console.log('\u{1F680} Checking for GSAP and Lenis...');\n        \n        // Fallback timer for content visibility\n        setTimeout(() => {\n          if (!window.gsapLoaded || typeof gsap === 'undefined') {\n            console.log('\u26A0\uFE0F GSAP failed to load - using fallback animations');\n            document.body.classList.add('content-fallback');\n          }\n        }, 3000);\n        \n        // Simple Lenis initialization\n        if (typeof Lenis !== 'undefined') {\n          console.log('\u2705 Lenis loaded');\n          \n          const lenis = new Lenis({\n            duration: 1.2,\n            smooth: true\n          });\n          \n          function raf(time) {\n            lenis.raf(time);\n            requestAnimationFrame(raf);\n          }\n          requestAnimationFrame(raf);\n          \n          window.lenis = lenis;\n        }\n        \n        // Enhanced GSAP setup with animations\n        if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {\n          console.log('\u2705 GSAP loaded - initializing animations');\n          gsap.registerPlugin(ScrollTrigger);\n          \n          // Hero title animation\n          gsap.set('.title-word', { y: '100%', opacity: 0 });\n          gsap.set('.hero-description', { y: 30, opacity: 0 });\n          gsap.set('.hero-cta', { y: 30, opacity: 0 });\n          gsap.set('.scroll-indicator', { y: 30, opacity: 0 });\n          \n          // Animate hero elements\n          const tl = gsap.timeline({ delay: 0.5 });\n          tl.to('.title-word', {\n            y: 0,\n            opacity: 1,\n            duration: 1.2,\n            ease: 'power3.out'\n          })\n          .to('.hero-description', {\n            y: 0,\n            opacity: 1,\n            duration: 0.8,\n            ease: 'power3.out'\n          }, '-=0.6')\n          .to('.hero-cta', {\n            y: 0,\n            opacity: 1,\n            duration: 0.8,\n            ease: 'power3.out'\n          }, '-=0.4')\n          .to('.scroll-indicator', {\n            y: 0,\n            opacity: 1,\n            duration: 0.6,\n            ease: 'power3.out'\n          }, '-=0.2');\n          \n          // About Us header animation\n          gsap.set('#services .overview-section h2', { y: '100%', opacity: 0 });\n          gsap.set('#services .lead-text', { y: 30, opacity: 0 });\n          ScrollTrigger.create({\n            trigger: '.overview-section',\n            start: 'top 80%',\n            onEnter: () => {\n              const tl = gsap.timeline();\n              tl.to('#services .overview-section h2', {\n                y: 0,\n                opacity: 1,\n                duration: 0.8,\n                ease: 'power3.out'\n              })\n              .to('#services .lead-text', {\n                y: 0,\n                opacity: 1,\n                duration: 0.6,\n                ease: 'power3.out'\n              }, '-=0.4');\n            }\n          });\n\n\n          \n\n\n          // Enhanced Contact section animations\n          gsap.set('.contact .big-text-line', { y: 100, opacity: 0 });\n          gsap.set('.contact .contact-subtitle', { y: 30, opacity: 0 });\n          ScrollTrigger.create({\n            trigger: '.contact-hero',\n            start: 'top 80%',\n            onEnter: () => {\n              const tl = gsap.timeline();\n              tl.to('.contact .big-text-line', {\n                y: 0,\n                opacity: 1,\n                duration: 1,\n                ease: 'power3.out',\n                stagger: 0.15\n              })\n              .to('.contact .contact-subtitle', {\n                y: 0,\n                opacity: 1,\n                duration: 0.8,\n                ease: 'power3.out'\n              }, '-=0.4');\n            }\n          });\n\n          // Quote sections animations\n          document.querySelectorAll('.quote-section').forEach((section, index) => {\n            gsap.set(section.querySelector('.quote-content'), { y: 50, opacity: 0 });\n            ScrollTrigger.create({\n              trigger: section,\n              start: 'top 75%',\n              onEnter: () => {\n                gsap.to(section.querySelector('.quote-content'), {\n                  y: 0,\n                  opacity: 1,\n                  duration: 1.2,\n                  ease: 'power3.out'\n                });\n              }\n            });\n          });\n          \n        } else {\n          console.log('\u26A0\uFE0F GSAP/ScrollTrigger not available - using fallback animations');\n          // Force fallback animations immediately\n          setTimeout(() => {\n            document.body.classList.add('content-fallback');\n            console.log('\u{1F527} Fallback animations activated');\n          }, 100);\n        }\n        \n\n        \n        // Enhanced Navigation functionality\n        function initNavigation() {\n          const burgerMenu = document.getElementById('burger-menu');\n          const fullscreenMenu = document.getElementById('fullscreen-menu');\n          const navLogo = document.getElementById('nav-logo');\n          let menuOpen = false;\n          \n          console.log('\u{1F527} Initializing navigation...');\n          console.log('Burger menu found:', !!burgerMenu);\n          console.log('Fullscreen menu found:', !!fullscreenMenu);\n\n                    // Section-based navigation color detection\n          function updateNavigationColor() {\n            if (!burgerMenu || !navLogo) return;\n            \n            const scrollY = window.scrollY;\n            const windowHeight = window.innerHeight;\n            \n            // Get all main sections\n            const heroSection = document.querySelector('.hero');\n            const servicesSection = document.querySelector('.about-us'); // Services/About section\n            const quoteSection = document.querySelector('.quote-section');\n            const portfolioSection = document.querySelector('.portfolio');\n            const contactSection = document.querySelector('.contact');\n            \n            let isOnDarkBackground = true; // Default: dark background (white nav)\n            \n                         // Calculate section positions\n             const sections = [\n               { element: heroSection, dark: true },      // Hero - dark (3D robot)\n               { element: servicesSection, dark: false }, // Services - white\n               { element: quoteSection, dark: true },     // Quote/Sphere - dark  \n               { element: portfolioSection, dark: false }, // Portfolio - white\n               { element: contactSection, dark: true }    // Contact - dark\n             ];\n            \n            // Find which section we're currently in\n            for (let i = 0; i < sections.length; i++) {\n              const section = sections[i];\n              if (!section.element) continue;\n              \n              const rect = section.element.getBoundingClientRect();\n              const sectionTop = scrollY + rect.top;\n              const sectionBottom = sectionTop + rect.height;\n              \n              // Check if we're in this section (with some overlap tolerance)\n              if (scrollY >= sectionTop - windowHeight * 0.2 && scrollY < sectionBottom - windowHeight * 0.2) {\n                isOnDarkBackground = section.dark;\n                break;\n              }\n            }\n            \n            // Update navigation elements\n            if (isOnDarkBackground) {\n              // Dark background sections - use white nav elements\n              burgerMenu.classList.remove('dark');\n              navLogo.classList.remove('dark');\n            } else {\n              // Light background sections (Portfolio) - use dark nav elements\n              burgerMenu.classList.add('dark');\n              navLogo.classList.add('dark');\n            }\n          }\n          \n          // Update on scroll\n          window.addEventListener('scroll', updateNavigationColor);\n          \n          // Update on resize\n          window.addEventListener('resize', updateNavigationColor);\n          \n          // Initial update\n          setTimeout(updateNavigationColor, 100);\n          \n          // Burger menu click\n          if (burgerMenu && fullscreenMenu) {\n            burgerMenu.addEventListener('click', (e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              \n              menuOpen = !menuOpen;\n              console.log('Menu toggled:', menuOpen);\n              \n              burgerMenu.classList.toggle('active', menuOpen);\n              fullscreenMenu.classList.toggle('active', menuOpen);\n              \n              // Prevent body scrolling when menu is open\n              if (menuOpen) {\n                // Store current scroll position\n                const scrollY = window.pageYOffset || document.documentElement.scrollTop;\n                \n                // Prevent body scrolling\n                document.body.style.overflow = 'hidden';\n                document.body.style.position = 'fixed';\n                document.body.style.width = '100%';\n                document.body.style.height = '100%';\n                document.body.style.top = \\`-\\${scrollY}px\\`;\n                \n                // Store scroll position for restoration\n                document.body.setAttribute('data-scroll-y', scrollY.toString());\n              } else {\n                // Restore body scrolling\n                const scrollY = parseInt(document.body.getAttribute('data-scroll-y') || '0');\n                \n                document.body.style.overflow = '';\n                document.body.style.position = '';\n                document.body.style.width = '';\n                document.body.style.height = '';\n                document.body.style.top = '';\n                \n                // Restore scroll position\n                window.scrollTo(0, scrollY);\n                document.body.removeAttribute('data-scroll-y');\n              }\n              \n              // Animate menu items (with or without GSAP)\n              if (typeof gsap !== 'undefined') {\n                                  if (menuOpen) {\n                    gsap.fromTo('.menu-nav a', {\n                      y: 60,\n                      opacity: 0\n                    }, {\n                      y: 0,\n                      opacity: 1,\n                      duration: 0.4,\n                      ease: 'power2.out',\n                      stagger: 0.05,\n                      delay: 0.05\n                    });\n                    \n                    gsap.fromTo('.menu-social a', {\n                      y: 20,\n                      opacity: 0\n                    }, {\n                      y: 0,\n                      opacity: 0.7,\n                      duration: 0.3,\n                      ease: 'power2.out',\n                      stagger: 0.03,\n                      delay: 0.2\n                    });\n                } else {\n                  gsap.to('.menu-nav a', {\n                    y: 100,\n                    opacity: 0,\n                    duration: 0.3,\n                    ease: 'power3.in',\n                    stagger: 0.02\n                  });\n                  \n                  gsap.to('.menu-social a', {\n                    y: 50,\n                    opacity: 0,\n                    duration: 0.3,\n                    ease: 'power3.in',\n                    stagger: 0.02\n                  });\n                }\n              } else {\n                console.log('\u{1F4F1} Using CSS-only menu animations');\n              }\n            });\n            \n            console.log('\u2705 Burger menu click handler attached');\n          } else {\n            console.log('\u274C Navigation elements not found');\n          }\n          \n          return { burgerMenu, fullscreenMenu, menuOpen: () => menuOpen, updateNavigationColor };\n        }\n        \n          // Initialize navigation\n  const nav = initNavigation();\n\n  // Smooth scroll functionality for burger menu\n  function initSmoothScrolling() {\n    const scrollLinks = document.querySelectorAll('.scroll-link');\n    const burgerMenu = document.querySelector('.burger-menu');\n    const fullscreenMenu = document.querySelector('.fullscreen-menu');\n    \n    scrollLinks.forEach(link => {\n      link.addEventListener('click', function(e) {\n        e.preventDefault();\n        \n        const href = this.getAttribute('href');\n        const targetId = href.replace('#', '');\n        const targetElement = document.getElementById(targetId);\n        \n        if (targetElement) {\n          console.log(\\`\u{1F3AF} Scrolling to: \\${targetId}\\`);\n          \n          // Close burger menu first\n          if (burgerMenu && fullscreenMenu) {\n            burgerMenu.classList.remove('active');\n            fullscreenMenu.classList.remove('active');\n            \n            // Restore body scroll\n            const currentScroll = parseInt(document.body.style.top || '0') * -1;\n            document.body.style.position = '';\n            document.body.style.top = '';\n            document.body.style.overflow = '';\n            document.body.style.width = '';\n            if (currentScroll > 0) {\n              window.scrollTo(0, currentScroll);\n            }\n          }\n          \n          // Smooth scroll to target with offset for fixed header\n          setTimeout(() => {\n            const headerOffset = 80;\n            const elementPosition = targetElement.getBoundingClientRect().top;\n            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n            \n            window.scrollTo({\n              top: offsetPosition,\n              behavior: 'smooth'\n            });\n          }, 300); // Small delay to let menu close\n        } else {\n          console.warn(\\`\u274C Target element not found: \\${targetId}\\`);\n        }\n      });\n    });\n    \n    console.log('\u2705 Smooth scrolling initialized');\n  }\n\n  // Initialize smooth scrolling\n  initSmoothScrolling();\n        \n        // Page Transition System\n        function initPageTransitions() {\n          const pageTransition = document.getElementById('page-transition');\n          if (!pageTransition) return;\n\n          console.log('\u{1F3AC} Initializing page transitions');\n\n          // Function to animate page transition\n          function animatePageTransition(url) {\n            return new Promise((resolve) => {\n              // Start transition (slide in from left)\n              pageTransition.classList.add('active');\n              \n              setTimeout(() => {\n                // Navigate to new page\n                window.location.href = url;\n                resolve(true);\n              }, 300); // Half the transition duration\n            });\n          }\n\n          // Function to exit transition on page load\n          function exitPageTransition() {\n            if (pageTransition.classList.contains('active')) {\n              setTimeout(() => {\n                pageTransition.classList.add('exit');\n                setTimeout(() => {\n                  pageTransition.classList.remove('active', 'exit');\n                }, 600);\n              }, 100);\n            }\n          }\n\n          // Exit transition on page load\n          exitPageTransition();\n\n          return { animatePageTransition };\n        }\n\n        // Initialize page transitions\n        const pageTransitions = initPageTransitions();\n\n        // Menu links handling\n        function initMenuLinks() {\n          document.querySelectorAll('.menu-nav a').forEach(link => {\n            link.addEventListener('click', (e) => {\n              const target = link.getAttribute('href');\n              \n              console.log('Menu link clicked:', target);\n              \n              // Restore body scrolling before closing menu\n              const scrollY = parseInt(document.body.getAttribute('data-scroll-y') || '0');\n              document.body.style.overflow = '';\n              document.body.style.position = '';\n              document.body.style.width = '';\n              document.body.style.height = '';\n              document.body.style.top = '';\n              window.scrollTo(0, scrollY);\n              document.body.removeAttribute('data-scroll-y');\n              \n              // Close menu using nav object\n              if (nav.burgerMenu) nav.burgerMenu.classList.remove('active');\n              if (nav.fullscreenMenu) nav.fullscreenMenu.classList.remove('active');\n              \n              // Update menuOpen state (if accessible)\n              if (typeof menuOpen !== 'undefined') {\n                menuOpen = false;\n              }\n              \n              // Handle different link types\n              if (target === '/') {\n                // Home link - special handling\n                e.preventDefault();\n                const currentPath = window.location.pathname;\n                \n                if (currentPath === '/' || currentPath === '/index.html') {\n                  // Already on home page - scroll to top\n                  const lenis = window.lenis;\n                  if (lenis) {\n                    lenis.scrollTo(0, { duration: 1.5 });\n                  } else {\n                    window.scrollTo({ top: 0, behavior: 'smooth' });\n                  }\n                  console.log('Scrolling to top of home page');\n                } else {\n                  // On sub-page - navigate to home page\n                  console.log('Navigating to home page');\n                  if (pageTransitions && pageTransitions.animatePageTransition) {\n                    pageTransitions.animatePageTransition('/');\n                  } else {\n                    window.location.href = '/';\n                  }\n                }\n              } else if (target && target.startsWith('#')) {\n                // Anchor link - prevent default and scroll\n                e.preventDefault();\n                const currentPath = window.location.pathname;\n                \n                if (currentPath === '/' || currentPath === '/index.html') {\n                  // On home page - scroll to section\n                  const targetElement = document.querySelector(target);\n                  if (targetElement) {\n                    const lenis = window.lenis;\n                    if (lenis) {\n                      lenis.scrollTo(targetElement, { duration: 1.5 });\n                    } else {\n                      targetElement.scrollIntoView({ behavior: 'smooth' });\n                    }\n                    console.log('Scrolling to:', target);\n                  } else {\n                    console.log('Target element not found:', target);\n                  }\n                } else {\n                  // On sub-page - navigate to home page with hash\n                  console.log('Navigating to home page with anchor:', target);\n                  if (pageTransitions && pageTransitions.animatePageTransition) {\n                    pageTransitions.animatePageTransition('/' + target);\n                  } else {\n                    window.location.href = '/' + target;\n                  }\n                }\n              } else if (target && target.startsWith('/')) {\n                // Page navigation - animate transition\n                e.preventDefault();\n                console.log('Animating page transition to:', target);\n                if (pageTransitions && pageTransitions.animatePageTransition) {\n                  pageTransitions.animatePageTransition(target);\n                } else {\n                  // Fallback to direct navigation\n                  window.location.href = target;\n                }\n              }\n            });\n          });\n          console.log('\u2705 Menu links initialized with page transitions');\n        }\n        \n        // Initialize menu links\n        initMenuLinks();\n        \n        // Navigation scroll effects\n        const mainNav = document.getElementById('main-nav');\n        const navLogo = document.getElementById('nav-logo');\n        if (mainNav && navLogo && typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {\n          ScrollTrigger.create({\n            trigger: \"body\",\n            start: \"top -100\",\n            end: \"bottom bottom\",\n            onUpdate: (self) => {\n              if (self.direction === 1) {\n                mainNav.classList.add('scrolled');\n                navLogo.classList.add('small');\n              } else {\n                mainNav.classList.remove('scrolled');\n                navLogo.classList.remove('small');\n              }\n              \n              // Update navigation color when scrolling\n              const burgerMenu = document.getElementById('burger-menu');\n              if (burgerMenu && nav.updateNavigationColor) {\n                nav.updateNavigationColor();\n              }\n            }\n          });\n        }\n        \n        // Global GSAP defaults\n        if (typeof gsap !== 'undefined') {\n          gsap.defaults({\n            ease: 'power3.out',\n            duration: 1\n          });\n        }\n        \n        console.log('\u{1F680} Netspire initialized');\n      }\n      \n      // Ultimate fallback - force content visibility after 6 seconds\n      setTimeout(() => {\n        console.log('\u{1F527} Ultimate fallback - forcing content visibility');\n        const hiddenElements = document.querySelectorAll('[style*=\"opacity: 0\"], .title-word, .hero-description, .hero-cta, .scroll-indicator, .service-item, .portfolio-item');\n        hiddenElements.forEach(el => {\n          if (el && el.style && window.getComputedStyle(el).opacity === '0') {\n            el.style.opacity = '1';\n            el.style.transform = 'translateY(0)';\n            el.style.transition = 'all 0.5s ease';\n          }\n        });\n      }, 6000);\n      \n      // Start basic preloader immediately\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n          initBasicPreloader();\n          initializeWebsite();\n        });\n      } else {\n        initBasicPreloader();\n        initializeWebsite();\n      }\n    <\/script> </body> </html>"])), addAttribute(description, "content"), addAttribute(canonicalURL, "href"), title, addAttribute(canonicalURL, "content"), addAttribute(title, "content"), addAttribute(description, "content"), addAttribute(Astro2.site ? new URL(image, Astro2.site).href : image, "content"), renderScript($$result, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro?astro&type=script&index=0&lang.ts"), renderScript($$result, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro?astro&type=script&index=1&lang.ts"), renderScript($$result, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro?astro&type=script&index=2&lang.ts"), renderScript($$result, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro?astro&type=script&index=3&lang.ts"), renderScript($$result, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro?astro&type=script&index=4&lang.ts"), renderScript($$result, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro?astro&type=script&index=5&lang.ts"), renderHead(), renderSlot($$result, $$slots["default"]));
}, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/layouts/Layout.astro", void 0);

export { $$Layout as $ };
