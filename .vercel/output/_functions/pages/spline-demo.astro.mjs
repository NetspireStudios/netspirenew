import { c as createAstro, a as createComponent, h as defineStyleVars, r as renderTemplate, i as defineScriptVars, f as addAttribute, m as maybeRenderHead, g as renderComponent } from '../chunks/astro/server_DCYO4UzX.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../chunks/Layout_mnAl4HSL.mjs';
/* empty css                                       */
import 'clsx';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro$1 = createAstro("https://netspire.studio");
const $$SplineScene = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$SplineScene;
  const {
    sceneUrl,
    height = "100vh",
    width = "100%",
    className = ""
  } = Astro2.props;
  const canvasId = `spline-canvas-${Math.random().toString(36).substr(2, 9)}`;
  const $$definedVars = defineStyleVars([{ height, width }]);
  return renderTemplate(_a || (_a = __template(["", "<div", " data-astro-cid-vxsscl5f", "> <canvas", ' class="spline-canvas" data-astro-cid-vxsscl5f', '></canvas> <div class="spline-loader"', " data-astro-cid-vxsscl5f", '> <div class="loader-spinner" data-astro-cid-vxsscl5f', "></div> <p data-astro-cid-vxsscl5f", ">Loading 3D Scene...</p> </div> </div>  <script>(function(){", "\n  async function initSplineScene() {\n    console.log('\u{1F680} Starting Spline scene initialization...');\n    console.log('Scene URL:', sceneUrl);\n    console.log('Canvas ID:', canvasId);\n    \n    try {\n      // Check if elements exist first\n      const canvas = document.getElementById(canvasId);\n      const loader = document.getElementById(`loader-${canvasId}`);\n      \n      console.log('Canvas element:', canvas);\n      console.log('Loader element:', loader);\n      \n      if (!canvas || !loader) {\n        console.error('\u274C Spline: Canvas or loader element not found');\n        console.error('Canvas ID searched:', canvasId);\n        console.error('Loader ID searched:', `loader-${canvasId}`);\n        return;\n      }\n      \n      console.log('\u{1F3A8} Initializing Spline scene...');\n      \n      // Try dynamic import with error handling\n      let Application;\n      try {\n        const splineModule = await import('@splinetool/runtime');\n        Application = splineModule.Application;\n        console.log('\u2705 Spline runtime loaded successfully');\n      } catch (importError) {\n        console.error('\u274C Failed to import Spline runtime:', importError);\n        \n        // Show error in loader\n        const loaderText = loader.querySelector('p');\n        const spinner = loader.querySelector('.loader-spinner');\n        \n        if (spinner) spinner.style.display = 'none';\n        if (loaderText) {\n          loaderText.textContent = 'Spline runtime not found';\n          loaderText.style.color = '#e74c3c';\n        }\n        return;\n      }\n      \n      const app = new Application(canvas);\n      console.log('\u{1F527} Spline Application created');\n      \n      // Load the scene with detailed error handling\n      try {\n        console.log('\u{1F4E5} Loading scene:', sceneUrl);\n        await app.load(sceneUrl);\n        \n        // Scene loaded successfully\n        console.log('\u2705 Spline scene loaded successfully!');\n        \n        // Hide loader and show canvas\n        setTimeout(() => {\n          loader.classList.add('hidden');\n          canvas.classList.add('loaded');\n          console.log('\u{1F3AD} Scene transition complete');\n        }, 500);\n        \n        // Optional: Add interaction events\n        canvas.addEventListener('click', () => {\n          console.log('\u{1F3AF} Spline scene clicked');\n        });\n        \n      } catch (loadError) {\n        console.error('\u274C Failed to load Spline scene:', loadError);\n        console.error('Scene URL that failed:', sceneUrl);\n        \n        // Show detailed error state\n        const loaderText = loader.querySelector('p');\n        const spinner = loader.querySelector('.loader-spinner');\n        \n        if (spinner) spinner.style.display = 'none';\n        if (loaderText) {\n          loaderText.textContent = 'Failed to load 3D scene';\n          loaderText.style.color = '#e74c3c';\n        }\n        \n        // Add retry functionality\n        setTimeout(() => {\n          if (loaderText) {\n            loaderText.innerHTML = 'Failed to load 3D scene<br><small style=\"font-size: 10px; opacity: 0.7;\">Check console for details</small>';\n          }\n        }, 2000);\n      }\n      \n    } catch (generalError) {\n      console.error('\u274C General Spline initialization error:', generalError);\n      \n      // Fallback error display\n      const loader = document.getElementById(`loader-${canvasId}`);\n      if (loader) {\n        const loaderText = loader.querySelector('p');\n        const spinner = loader.querySelector('.loader-spinner');\n        \n        if (spinner) spinner.style.display = 'none';\n        if (loaderText) {\n          loaderText.textContent = 'Spline initialization failed';\n          loaderText.style.color = '#e74c3c';\n        }\n      }\n    }\n  }\n  \n  // Initialize when DOM is ready\n  console.log('\u{1F4CB} Setting up Spline scene initialization...');\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initSplineScene);\n    console.log('\u23F3 Waiting for DOM to load...');\n  } else {\n    console.log('\u{1F3C3}\u200D\u2642\uFE0F DOM already loaded, initializing immediately...');\n    initSplineScene();\n  }\n})();<\/script>"], ["", "<div", " data-astro-cid-vxsscl5f", "> <canvas", ' class="spline-canvas" data-astro-cid-vxsscl5f', '></canvas> <div class="spline-loader"', " data-astro-cid-vxsscl5f", '> <div class="loader-spinner" data-astro-cid-vxsscl5f', "></div> <p data-astro-cid-vxsscl5f", ">Loading 3D Scene...</p> </div> </div>  <script>(function(){", "\n  async function initSplineScene() {\n    console.log('\u{1F680} Starting Spline scene initialization...');\n    console.log('Scene URL:', sceneUrl);\n    console.log('Canvas ID:', canvasId);\n    \n    try {\n      // Check if elements exist first\n      const canvas = document.getElementById(canvasId);\n      const loader = document.getElementById(\\`loader-\\${canvasId}\\`);\n      \n      console.log('Canvas element:', canvas);\n      console.log('Loader element:', loader);\n      \n      if (!canvas || !loader) {\n        console.error('\u274C Spline: Canvas or loader element not found');\n        console.error('Canvas ID searched:', canvasId);\n        console.error('Loader ID searched:', \\`loader-\\${canvasId}\\`);\n        return;\n      }\n      \n      console.log('\u{1F3A8} Initializing Spline scene...');\n      \n      // Try dynamic import with error handling\n      let Application;\n      try {\n        const splineModule = await import('@splinetool/runtime');\n        Application = splineModule.Application;\n        console.log('\u2705 Spline runtime loaded successfully');\n      } catch (importError) {\n        console.error('\u274C Failed to import Spline runtime:', importError);\n        \n        // Show error in loader\n        const loaderText = loader.querySelector('p');\n        const spinner = loader.querySelector('.loader-spinner');\n        \n        if (spinner) spinner.style.display = 'none';\n        if (loaderText) {\n          loaderText.textContent = 'Spline runtime not found';\n          loaderText.style.color = '#e74c3c';\n        }\n        return;\n      }\n      \n      const app = new Application(canvas);\n      console.log('\u{1F527} Spline Application created');\n      \n      // Load the scene with detailed error handling\n      try {\n        console.log('\u{1F4E5} Loading scene:', sceneUrl);\n        await app.load(sceneUrl);\n        \n        // Scene loaded successfully\n        console.log('\u2705 Spline scene loaded successfully!');\n        \n        // Hide loader and show canvas\n        setTimeout(() => {\n          loader.classList.add('hidden');\n          canvas.classList.add('loaded');\n          console.log('\u{1F3AD} Scene transition complete');\n        }, 500);\n        \n        // Optional: Add interaction events\n        canvas.addEventListener('click', () => {\n          console.log('\u{1F3AF} Spline scene clicked');\n        });\n        \n      } catch (loadError) {\n        console.error('\u274C Failed to load Spline scene:', loadError);\n        console.error('Scene URL that failed:', sceneUrl);\n        \n        // Show detailed error state\n        const loaderText = loader.querySelector('p');\n        const spinner = loader.querySelector('.loader-spinner');\n        \n        if (spinner) spinner.style.display = 'none';\n        if (loaderText) {\n          loaderText.textContent = 'Failed to load 3D scene';\n          loaderText.style.color = '#e74c3c';\n        }\n        \n        // Add retry functionality\n        setTimeout(() => {\n          if (loaderText) {\n            loaderText.innerHTML = 'Failed to load 3D scene<br><small style=\"font-size: 10px; opacity: 0.7;\">Check console for details</small>';\n          }\n        }, 2000);\n      }\n      \n    } catch (generalError) {\n      console.error('\u274C General Spline initialization error:', generalError);\n      \n      // Fallback error display\n      const loader = document.getElementById(\\`loader-\\${canvasId}\\`);\n      if (loader) {\n        const loaderText = loader.querySelector('p');\n        const spinner = loader.querySelector('.loader-spinner');\n        \n        if (spinner) spinner.style.display = 'none';\n        if (loaderText) {\n          loaderText.textContent = 'Spline initialization failed';\n          loaderText.style.color = '#e74c3c';\n        }\n      }\n    }\n  }\n  \n  // Initialize when DOM is ready\n  console.log('\u{1F4CB} Setting up Spline scene initialization...');\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initSplineScene);\n    console.log('\u23F3 Waiting for DOM to load...');\n  } else {\n    console.log('\u{1F3C3}\u200D\u2642\uFE0F DOM already loaded, initializing immediately...');\n    initSplineScene();\n  }\n})();<\/script>"])), maybeRenderHead(), addAttribute(`spline-container ${className}`, "class"), addAttribute($$definedVars, "style"), addAttribute(canvasId, "id"), addAttribute($$definedVars, "style"), addAttribute(`loader-${canvasId}`, "id"), addAttribute($$definedVars, "style"), addAttribute($$definedVars, "style"), addAttribute($$definedVars, "style"), defineScriptVars({ sceneUrl, canvasId }));
}, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/components/SplineScene.astro", void 0);

const $$Astro = createAstro("https://netspire.studio");
const $$SplineDemo = createComponent(($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$SplineDemo;
  return renderTemplate`${renderComponent($$result, "Layout", $$Layout, { "title": "Spline Demo - Netspire", "data-astro-cid-biqcqh3k": true }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<main data-astro-cid-biqcqh3k> <section class="spline-hero" data-astro-cid-biqcqh3k> <div class="hero-content" data-astro-cid-biqcqh3k> <h1 data-astro-cid-biqcqh3k>Spline 3D Integration</h1> <p data-astro-cid-biqcqh3k>High-performance 3D scenes with seamless Astro integration</p> </div> <!-- Your Spline Scene --> ${renderComponent($$result2, "SplineScene", $$SplineScene, { "sceneUrl": "https://prod.spline.design/h9CGtSTtyMc58yFj/scene.splinecode", "height": "100vh", "className": "hero-spline", "data-astro-cid-biqcqh3k": true })} </section> <section class="content-section" data-astro-cid-biqcqh3k> <div class="container" data-astro-cid-biqcqh3k> <h2 data-astro-cid-biqcqh3k>Features</h2> <div class="features-grid" data-astro-cid-biqcqh3k> <div class="feature" data-astro-cid-biqcqh3k> <h3 data-astro-cid-biqcqh3k>High Performance</h3> <p data-astro-cid-biqcqh3k>Direct canvas rendering with no React overhead</p> </div> <div class="feature" data-astro-cid-biqcqh3k> <h3 data-astro-cid-biqcqh3k>Seamless Integration</h3> <p data-astro-cid-biqcqh3k>No iframe borders, perfect styling control</p> </div> <div class="feature" data-astro-cid-biqcqh3k> <h3 data-astro-cid-biqcqh3k>Loading States</h3> <p data-astro-cid-biqcqh3k>Beautiful loading animation with error handling</p> </div> </div> </div> </section> <!-- Smaller Spline Scene Example --> <section class="smaller-demo" data-astro-cid-biqcqh3k> <div class="container" data-astro-cid-biqcqh3k> <h2 data-astro-cid-biqcqh3k>Smaller Scene Example</h2> ${renderComponent($$result2, "SplineScene", $$SplineScene, { "sceneUrl": "https://prod.spline.design/h9CGtSTtyMc58yFj/scene.splinecode", "height": "400px", "className": "small-spline", "data-astro-cid-biqcqh3k": true })} </div> </section> </main> ` })} `;
}, "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/pages/spline-demo.astro", void 0);

const $$file = "C:/Users/razaa/OneDrive/Desktop/netspirenew-master/netspirenew-master/src/pages/spline-demo.astro";
const $$url = "/spline-demo";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$SplineDemo,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
